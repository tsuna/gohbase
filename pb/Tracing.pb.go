//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: Tracing.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RPCTInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in Tracing.proto.
	TraceId *int64 `protobuf:"varint,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// Deprecated: Marked as deprecated in Tracing.proto.
	ParentId      *int64            `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Headers       map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCTInfo) Reset() {
	*x = RPCTInfo{}
	mi := &file_Tracing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCTInfo) ProtoMessage() {}

func (x *RPCTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Tracing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCTInfo.ProtoReflect.Descriptor instead.
func (*RPCTInfo) Descriptor() ([]byte, []int) {
	return file_Tracing_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in Tracing.proto.
func (x *RPCTInfo) GetTraceId() int64 {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return 0
}

// Deprecated: Marked as deprecated in Tracing.proto.
func (x *RPCTInfo) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *RPCTInfo) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_Tracing_proto protoreflect.FileDescriptor

const file_Tracing_proto_rawDesc = "" +
	"\n" +
	"\rTracing.proto\x12\x02pb\"\xbb\x01\n" +
	"\bRPCTInfo\x12\x1d\n" +
	"\btrace_id\x18\x01 \x01(\x03B\x02\x18\x01R\atraceId\x12\x1f\n" +
	"\tparent_id\x18\x02 \x01(\x03B\x02\x18\x01R\bparentId\x123\n" +
	"\aheaders\x18\x03 \x03(\v2\x19.pb.RPCTInfo.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01BG\n" +
	"*org.apache.hadoop.hbase.protobuf.generatedB\rTracingProtosH\x01Z\x05../pb\xa0\x01\x01"

var (
	file_Tracing_proto_rawDescOnce sync.Once
	file_Tracing_proto_rawDescData []byte
)

func file_Tracing_proto_rawDescGZIP() []byte {
	file_Tracing_proto_rawDescOnce.Do(func() {
		file_Tracing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Tracing_proto_rawDesc), len(file_Tracing_proto_rawDesc)))
	})
	return file_Tracing_proto_rawDescData
}

var file_Tracing_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_Tracing_proto_goTypes = []any{
	(*RPCTInfo)(nil), // 0: pb.RPCTInfo
	nil,              // 1: pb.RPCTInfo.HeadersEntry
}
var file_Tracing_proto_depIdxs = []int32{
	1, // 0: pb.RPCTInfo.headers:type_name -> pb.RPCTInfo.HeadersEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_Tracing_proto_init() }
func file_Tracing_proto_init() {
	if File_Tracing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Tracing_proto_rawDesc), len(file_Tracing_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Tracing_proto_goTypes,
		DependencyIndexes: file_Tracing_proto_depIdxs,
		MessageInfos:      file_Tracing_proto_msgTypes,
	}.Build()
	File_Tracing_proto = out.File
	file_Tracing_proto_goTypes = nil
	file_Tracing_proto_depIdxs = nil
}
