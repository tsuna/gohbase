//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ZNode data in hbase are serialized protobufs with a four byte
// 'magic' 'PBUF' prefix.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: ZooKeeper.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SplitLogTask_State int32

const (
	SplitLogTask_UNASSIGNED SplitLogTask_State = 0
	SplitLogTask_OWNED      SplitLogTask_State = 1
	SplitLogTask_RESIGNED   SplitLogTask_State = 2
	SplitLogTask_DONE       SplitLogTask_State = 3
	SplitLogTask_ERR        SplitLogTask_State = 4
)

// Enum value maps for SplitLogTask_State.
var (
	SplitLogTask_State_name = map[int32]string{
		0: "UNASSIGNED",
		1: "OWNED",
		2: "RESIGNED",
		3: "DONE",
		4: "ERR",
	}
	SplitLogTask_State_value = map[string]int32{
		"UNASSIGNED": 0,
		"OWNED":      1,
		"RESIGNED":   2,
		"DONE":       3,
		"ERR":        4,
	}
)

func (x SplitLogTask_State) Enum() *SplitLogTask_State {
	p := new(SplitLogTask_State)
	*p = x
	return p
}

func (x SplitLogTask_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitLogTask_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ZooKeeper_proto_enumTypes[0].Descriptor()
}

func (SplitLogTask_State) Type() protoreflect.EnumType {
	return &file_ZooKeeper_proto_enumTypes[0]
}

func (x SplitLogTask_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SplitLogTask_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SplitLogTask_State(num)
	return nil
}

// Deprecated: Use SplitLogTask_State.Descriptor instead.
func (SplitLogTask_State) EnumDescriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{4, 0}
}

type SplitLogTask_RecoveryMode int32

const (
	SplitLogTask_UNKNOWN       SplitLogTask_RecoveryMode = 0
	SplitLogTask_LOG_SPLITTING SplitLogTask_RecoveryMode = 1
	SplitLogTask_LOG_REPLAY    SplitLogTask_RecoveryMode = 2
)

// Enum value maps for SplitLogTask_RecoveryMode.
var (
	SplitLogTask_RecoveryMode_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOG_SPLITTING",
		2: "LOG_REPLAY",
	}
	SplitLogTask_RecoveryMode_value = map[string]int32{
		"UNKNOWN":       0,
		"LOG_SPLITTING": 1,
		"LOG_REPLAY":    2,
	}
)

func (x SplitLogTask_RecoveryMode) Enum() *SplitLogTask_RecoveryMode {
	p := new(SplitLogTask_RecoveryMode)
	*p = x
	return p
}

func (x SplitLogTask_RecoveryMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitLogTask_RecoveryMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ZooKeeper_proto_enumTypes[1].Descriptor()
}

func (SplitLogTask_RecoveryMode) Type() protoreflect.EnumType {
	return &file_ZooKeeper_proto_enumTypes[1]
}

func (x SplitLogTask_RecoveryMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SplitLogTask_RecoveryMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SplitLogTask_RecoveryMode(num)
	return nil
}

// Deprecated: Use SplitLogTask_RecoveryMode.Descriptor instead.
func (SplitLogTask_RecoveryMode) EnumDescriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{4, 1}
}

// Table's current state
type Table_State int32

const (
	Table_ENABLED   Table_State = 0
	Table_DISABLED  Table_State = 1
	Table_DISABLING Table_State = 2
	Table_ENABLING  Table_State = 3
)

// Enum value maps for Table_State.
var (
	Table_State_name = map[int32]string{
		0: "ENABLED",
		1: "DISABLED",
		2: "DISABLING",
		3: "ENABLING",
	}
	Table_State_value = map[string]int32{
		"ENABLED":   0,
		"DISABLED":  1,
		"DISABLING": 2,
		"ENABLING":  3,
	}
)

func (x Table_State) Enum() *Table_State {
	p := new(Table_State)
	*p = x
	return p
}

func (x Table_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Table_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ZooKeeper_proto_enumTypes[2].Descriptor()
}

func (Table_State) Type() protoreflect.EnumType {
	return &file_ZooKeeper_proto_enumTypes[2]
}

func (x Table_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Table_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Table_State(num)
	return nil
}

// Deprecated: Use Table_State.Descriptor instead.
func (Table_State) EnumDescriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{5, 0}
}

type ReplicationState_State int32

const (
	ReplicationState_ENABLED  ReplicationState_State = 0
	ReplicationState_DISABLED ReplicationState_State = 1
)

// Enum value maps for ReplicationState_State.
var (
	ReplicationState_State_name = map[int32]string{
		0: "ENABLED",
		1: "DISABLED",
	}
	ReplicationState_State_value = map[string]int32{
		"ENABLED":  0,
		"DISABLED": 1,
	}
)

func (x ReplicationState_State) Enum() *ReplicationState_State {
	p := new(ReplicationState_State)
	*p = x
	return p
}

func (x ReplicationState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ZooKeeper_proto_enumTypes[3].Descriptor()
}

func (ReplicationState_State) Type() protoreflect.EnumType {
	return &file_ZooKeeper_proto_enumTypes[3]
}

func (x ReplicationState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplicationState_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplicationState_State(num)
	return nil
}

// Deprecated: Use ReplicationState_State.Descriptor instead.
func (ReplicationState_State) EnumDescriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{7, 0}
}

// *
// Content of the meta-region-server znode.
type MetaRegionServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ServerName hosting the meta region currently, or destination server,
	// if meta region is in transition.
	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	// The major version of the rpc the server speaks.  This is used so that
	// clients connecting to the cluster can have prior knowledge of what version
	// to send to a RegionServer.  AsyncHBase will use this to detect versions.
	RpcVersion *uint32 `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	// State of the region transition. OPEN means fully operational 'hbase:meta'
	State         *RegionState_State `protobuf:"varint,3,opt,name=state,enum=pb.RegionState_State" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetaRegionServer) Reset() {
	*x = MetaRegionServer{}
	mi := &file_ZooKeeper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaRegionServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaRegionServer) ProtoMessage() {}

func (x *MetaRegionServer) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaRegionServer.ProtoReflect.Descriptor instead.
func (*MetaRegionServer) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{0}
}

func (x *MetaRegionServer) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *MetaRegionServer) GetRpcVersion() uint32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *MetaRegionServer) GetState() RegionState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RegionState_OFFLINE
}

// *
// Content of the master znode.
type Master struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ServerName of the current Master
	Master *ServerName `protobuf:"bytes,1,req,name=master" json:"master,omitempty"`
	// Major RPC version so that clients can know what version the master can accept.
	RpcVersion    *uint32 `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	InfoPort      *uint32 `protobuf:"varint,3,opt,name=info_port,json=infoPort" json:"info_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Master) Reset() {
	*x = Master{}
	mi := &file_ZooKeeper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Master) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Master) ProtoMessage() {}

func (x *Master) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Master.ProtoReflect.Descriptor instead.
func (*Master) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{1}
}

func (x *Master) GetMaster() *ServerName {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *Master) GetRpcVersion() uint32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *Master) GetInfoPort() uint32 {
	if x != nil && x.InfoPort != nil {
		return *x.InfoPort
	}
	return 0
}

// *
// Content of the '/hbase/running', cluster state, znode.
type ClusterUp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If this znode is present, cluster is up.  Currently
	// the data is cluster start_date.
	StartDate     *string `protobuf:"bytes,1,req,name=start_date,json=startDate" json:"start_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterUp) Reset() {
	*x = ClusterUp{}
	mi := &file_ZooKeeper_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUp) ProtoMessage() {}

func (x *ClusterUp) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUp.ProtoReflect.Descriptor instead.
func (*ClusterUp) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterUp) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

// *
// What we write under unassigned up in zookeeper as a region moves through
// open/close, etc., regions.  Details a region in transition.
type RegionTransition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
	EventTypeCode *uint32 `protobuf:"varint,1,req,name=event_type_code,json=eventTypeCode" json:"event_type_code,omitempty"`
	// Full regionname in bytes
	RegionName []byte  `protobuf:"bytes,2,req,name=region_name,json=regionName" json:"region_name,omitempty"`
	CreateTime *uint64 `protobuf:"varint,3,req,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The region server where the transition will happen or is happening
	ServerName    *ServerName `protobuf:"bytes,4,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	Payload       []byte      `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionTransition) Reset() {
	*x = RegionTransition{}
	mi := &file_ZooKeeper_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionTransition) ProtoMessage() {}

func (x *RegionTransition) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionTransition.ProtoReflect.Descriptor instead.
func (*RegionTransition) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{3}
}

func (x *RegionTransition) GetEventTypeCode() uint32 {
	if x != nil && x.EventTypeCode != nil {
		return *x.EventTypeCode
	}
	return 0
}

func (x *RegionTransition) GetRegionName() []byte {
	if x != nil {
		return x.RegionName
	}
	return nil
}

func (x *RegionTransition) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *RegionTransition) GetServerName() *ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *RegionTransition) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// *
// WAL SplitLog directory znodes have this for content.  Used doing distributed
// WAL splitting.  Holds current state and name of server that originated split.
type SplitLogTask struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	State         *SplitLogTask_State        `protobuf:"varint,1,req,name=state,enum=pb.SplitLogTask_State" json:"state,omitempty"`
	ServerName    *ServerName                `protobuf:"bytes,2,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	Mode          *SplitLogTask_RecoveryMode `protobuf:"varint,3,opt,name=mode,enum=pb.SplitLogTask_RecoveryMode,def=0" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for SplitLogTask fields.
const (
	Default_SplitLogTask_Mode = SplitLogTask_UNKNOWN
)

func (x *SplitLogTask) Reset() {
	*x = SplitLogTask{}
	mi := &file_ZooKeeper_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitLogTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitLogTask) ProtoMessage() {}

func (x *SplitLogTask) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitLogTask.ProtoReflect.Descriptor instead.
func (*SplitLogTask) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{4}
}

func (x *SplitLogTask) GetState() SplitLogTask_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SplitLogTask_UNASSIGNED
}

func (x *SplitLogTask) GetServerName() *ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *SplitLogTask) GetMode() SplitLogTask_RecoveryMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_SplitLogTask_Mode
}

// *
// The znode that holds state of table.
type Table struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the table's state.  If no znode for a table,
	// its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
	// for more.
	State         *Table_State `protobuf:"varint,1,req,name=state,enum=pb.Table_State,def=0" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for Table fields.
const (
	Default_Table_State = Table_ENABLED
)

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_ZooKeeper_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{5}
}

func (x *Table) GetState() Table_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_Table_State
}

// *
// Used by replication. Holds a replication peer key.
type ReplicationPeer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// clusterkey is the concatenation of the slave cluster's
	// hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
	Clusterkey              *string           `protobuf:"bytes,1,req,name=clusterkey" json:"clusterkey,omitempty"`
	ReplicationEndpointImpl *string           `protobuf:"bytes,2,opt,name=replicationEndpointImpl" json:"replicationEndpointImpl,omitempty"`
	Data                    []*BytesBytesPair `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Configuration           []*NameStringPair `protobuf:"bytes,4,rep,name=configuration" json:"configuration,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReplicationPeer) Reset() {
	*x = ReplicationPeer{}
	mi := &file_ZooKeeper_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationPeer) ProtoMessage() {}

func (x *ReplicationPeer) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationPeer.ProtoReflect.Descriptor instead.
func (*ReplicationPeer) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicationPeer) GetClusterkey() string {
	if x != nil && x.Clusterkey != nil {
		return *x.Clusterkey
	}
	return ""
}

func (x *ReplicationPeer) GetReplicationEndpointImpl() string {
	if x != nil && x.ReplicationEndpointImpl != nil {
		return *x.ReplicationEndpointImpl
	}
	return ""
}

func (x *ReplicationPeer) GetData() []*BytesBytesPair {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReplicationPeer) GetConfiguration() []*NameStringPair {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// *
// Used by replication. Holds whether enabled or disabled
type ReplicationState struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	State         *ReplicationState_State `protobuf:"varint,1,req,name=state,enum=pb.ReplicationState_State" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationState) Reset() {
	*x = ReplicationState{}
	mi := &file_ZooKeeper_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationState) ProtoMessage() {}

func (x *ReplicationState) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationState.ProtoReflect.Descriptor instead.
func (*ReplicationState) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationState) GetState() ReplicationState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ReplicationState_ENABLED
}

// *
// Used by replication. Holds the current position in an WAL file.
type ReplicationHLogPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *int64                 `protobuf:"varint,1,req,name=position" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationHLogPosition) Reset() {
	*x = ReplicationHLogPosition{}
	mi := &file_ZooKeeper_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationHLogPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationHLogPosition) ProtoMessage() {}

func (x *ReplicationHLogPosition) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationHLogPosition.ProtoReflect.Descriptor instead.
func (*ReplicationHLogPosition) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicationHLogPosition) GetPosition() int64 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

// *
// Used by replication. Used to lock a region server during failover.
type ReplicationLock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockOwner     *string                `protobuf:"bytes,1,req,name=lock_owner,json=lockOwner" json:"lock_owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationLock) Reset() {
	*x = ReplicationLock{}
	mi := &file_ZooKeeper_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationLock) ProtoMessage() {}

func (x *ReplicationLock) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationLock.ProtoReflect.Descriptor instead.
func (*ReplicationLock) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{9}
}

func (x *ReplicationLock) GetLockOwner() string {
	if x != nil && x.LockOwner != nil {
		return *x.LockOwner
	}
	return ""
}

// *
// Metadata associated with a table lock in zookeeper
type TableLock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     *TableName             `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	LockOwner     *ServerName            `protobuf:"bytes,2,opt,name=lock_owner,json=lockOwner" json:"lock_owner,omitempty"`
	ThreadId      *int64                 `protobuf:"varint,3,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	IsShared      *bool                  `protobuf:"varint,4,opt,name=is_shared,json=isShared" json:"is_shared,omitempty"`
	Purpose       *string                `protobuf:"bytes,5,opt,name=purpose" json:"purpose,omitempty"`
	CreateTime    *int64                 `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableLock) Reset() {
	*x = TableLock{}
	mi := &file_ZooKeeper_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableLock) ProtoMessage() {}

func (x *TableLock) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableLock.ProtoReflect.Descriptor instead.
func (*TableLock) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{10}
}

func (x *TableLock) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *TableLock) GetLockOwner() *ServerName {
	if x != nil {
		return x.LockOwner
	}
	return nil
}

func (x *TableLock) GetThreadId() int64 {
	if x != nil && x.ThreadId != nil {
		return *x.ThreadId
	}
	return 0
}

func (x *TableLock) GetIsShared() bool {
	if x != nil && x.IsShared != nil {
		return *x.IsShared
	}
	return false
}

func (x *TableLock) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *TableLock) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

// *
// State of the switch.
type SwitchState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchState) Reset() {
	*x = SwitchState{}
	mi := &file_ZooKeeper_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchState) ProtoMessage() {}

func (x *SwitchState) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchState.ProtoReflect.Descriptor instead.
func (*SwitchState) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{11}
}

func (x *SwitchState) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

var File_ZooKeeper_proto protoreflect.FileDescriptor

const file_ZooKeeper_proto_rawDesc = "" +
	"\n" +
	"\x0fZooKeeper.proto\x12\x02pb\x1a\vHBase.proto\x1a\x13ClusterStatus.proto\"\x88\x01\n" +
	"\x10MetaRegionServer\x12&\n" +
	"\x06server\x18\x01 \x02(\v2\x0e.pb.ServerNameR\x06server\x12\x1f\n" +
	"\vrpc_version\x18\x02 \x01(\rR\n" +
	"rpcVersion\x12+\n" +
	"\x05state\x18\x03 \x01(\x0e2\x15.pb.RegionState.StateR\x05state\"n\n" +
	"\x06Master\x12&\n" +
	"\x06master\x18\x01 \x02(\v2\x0e.pb.ServerNameR\x06master\x12\x1f\n" +
	"\vrpc_version\x18\x02 \x01(\rR\n" +
	"rpcVersion\x12\x1b\n" +
	"\tinfo_port\x18\x03 \x01(\rR\binfoPort\"*\n" +
	"\tClusterUp\x12\x1d\n" +
	"\n" +
	"start_date\x18\x01 \x02(\tR\tstartDate\"\xc7\x01\n" +
	"\x10RegionTransition\x12&\n" +
	"\x0fevent_type_code\x18\x01 \x02(\rR\reventTypeCode\x12\x1f\n" +
	"\vregion_name\x18\x02 \x02(\fR\n" +
	"regionName\x12\x1f\n" +
	"\vcreate_time\x18\x03 \x02(\x04R\n" +
	"createTime\x12/\n" +
	"\vserver_name\x18\x04 \x02(\v2\x0e.pb.ServerNameR\n" +
	"serverName\x12\x18\n" +
	"\apayload\x18\x05 \x01(\fR\apayload\"\xae\x02\n" +
	"\fSplitLogTask\x12,\n" +
	"\x05state\x18\x01 \x02(\x0e2\x16.pb.SplitLogTask.StateR\x05state\x12/\n" +
	"\vserver_name\x18\x02 \x02(\v2\x0e.pb.ServerNameR\n" +
	"serverName\x12:\n" +
	"\x04mode\x18\x03 \x01(\x0e2\x1d.pb.SplitLogTask.RecoveryMode:\aUNKNOWNR\x04mode\"C\n" +
	"\x05State\x12\x0e\n" +
	"\n" +
	"UNASSIGNED\x10\x00\x12\t\n" +
	"\x05OWNED\x10\x01\x12\f\n" +
	"\bRESIGNED\x10\x02\x12\b\n" +
	"\x04DONE\x10\x03\x12\a\n" +
	"\x03ERR\x10\x04\">\n" +
	"\fRecoveryMode\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x11\n" +
	"\rLOG_SPLITTING\x10\x01\x12\x0e\n" +
	"\n" +
	"LOG_REPLAY\x10\x02\"x\n" +
	"\x05Table\x12.\n" +
	"\x05state\x18\x01 \x02(\x0e2\x0f.pb.Table.State:\aENABLEDR\x05state\"?\n" +
	"\x05State\x12\v\n" +
	"\aENABLED\x10\x00\x12\f\n" +
	"\bDISABLED\x10\x01\x12\r\n" +
	"\tDISABLING\x10\x02\x12\f\n" +
	"\bENABLING\x10\x03\"\xcd\x01\n" +
	"\x0fReplicationPeer\x12\x1e\n" +
	"\n" +
	"clusterkey\x18\x01 \x02(\tR\n" +
	"clusterkey\x128\n" +
	"\x17replicationEndpointImpl\x18\x02 \x01(\tR\x17replicationEndpointImpl\x12&\n" +
	"\x04data\x18\x03 \x03(\v2\x12.pb.BytesBytesPairR\x04data\x128\n" +
	"\rconfiguration\x18\x04 \x03(\v2\x12.pb.NameStringPairR\rconfiguration\"h\n" +
	"\x10ReplicationState\x120\n" +
	"\x05state\x18\x01 \x02(\x0e2\x1a.pb.ReplicationState.StateR\x05state\"\"\n" +
	"\x05State\x12\v\n" +
	"\aENABLED\x10\x00\x12\f\n" +
	"\bDISABLED\x10\x01\"5\n" +
	"\x17ReplicationHLogPosition\x12\x1a\n" +
	"\bposition\x18\x01 \x02(\x03R\bposition\"0\n" +
	"\x0fReplicationLock\x12\x1d\n" +
	"\n" +
	"lock_owner\x18\x01 \x02(\tR\tlockOwner\"\xdd\x01\n" +
	"\tTableLock\x12,\n" +
	"\n" +
	"table_name\x18\x01 \x01(\v2\r.pb.TableNameR\ttableName\x12-\n" +
	"\n" +
	"lock_owner\x18\x02 \x01(\v2\x0e.pb.ServerNameR\tlockOwner\x12\x1b\n" +
	"\tthread_id\x18\x03 \x01(\x03R\bthreadId\x12\x1b\n" +
	"\tis_shared\x18\x04 \x01(\bR\bisShared\x12\x18\n" +
	"\apurpose\x18\x05 \x01(\tR\apurpose\x12\x1f\n" +
	"\vcreate_time\x18\x06 \x01(\x03R\n" +
	"createTime\"'\n" +
	"\vSwitchState\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabledBL\n" +
	"*org.apache.hadoop.hbase.protobuf.generatedB\x0fZooKeeperProtosH\x01Z\x05../pb\x88\x01\x01\xa0\x01\x01"

var (
	file_ZooKeeper_proto_rawDescOnce sync.Once
	file_ZooKeeper_proto_rawDescData []byte
)

func file_ZooKeeper_proto_rawDescGZIP() []byte {
	file_ZooKeeper_proto_rawDescOnce.Do(func() {
		file_ZooKeeper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ZooKeeper_proto_rawDesc), len(file_ZooKeeper_proto_rawDesc)))
	})
	return file_ZooKeeper_proto_rawDescData
}

var file_ZooKeeper_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ZooKeeper_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ZooKeeper_proto_goTypes = []any{
	(SplitLogTask_State)(0),         // 0: pb.SplitLogTask.State
	(SplitLogTask_RecoveryMode)(0),  // 1: pb.SplitLogTask.RecoveryMode
	(Table_State)(0),                // 2: pb.Table.State
	(ReplicationState_State)(0),     // 3: pb.ReplicationState.State
	(*MetaRegionServer)(nil),        // 4: pb.MetaRegionServer
	(*Master)(nil),                  // 5: pb.Master
	(*ClusterUp)(nil),               // 6: pb.ClusterUp
	(*RegionTransition)(nil),        // 7: pb.RegionTransition
	(*SplitLogTask)(nil),            // 8: pb.SplitLogTask
	(*Table)(nil),                   // 9: pb.Table
	(*ReplicationPeer)(nil),         // 10: pb.ReplicationPeer
	(*ReplicationState)(nil),        // 11: pb.ReplicationState
	(*ReplicationHLogPosition)(nil), // 12: pb.ReplicationHLogPosition
	(*ReplicationLock)(nil),         // 13: pb.ReplicationLock
	(*TableLock)(nil),               // 14: pb.TableLock
	(*SwitchState)(nil),             // 15: pb.SwitchState
	(*ServerName)(nil),              // 16: pb.ServerName
	(RegionState_State)(0),          // 17: pb.RegionState.State
	(*BytesBytesPair)(nil),          // 18: pb.BytesBytesPair
	(*NameStringPair)(nil),          // 19: pb.NameStringPair
	(*TableName)(nil),               // 20: pb.TableName
}
var file_ZooKeeper_proto_depIdxs = []int32{
	16, // 0: pb.MetaRegionServer.server:type_name -> pb.ServerName
	17, // 1: pb.MetaRegionServer.state:type_name -> pb.RegionState.State
	16, // 2: pb.Master.master:type_name -> pb.ServerName
	16, // 3: pb.RegionTransition.server_name:type_name -> pb.ServerName
	0,  // 4: pb.SplitLogTask.state:type_name -> pb.SplitLogTask.State
	16, // 5: pb.SplitLogTask.server_name:type_name -> pb.ServerName
	1,  // 6: pb.SplitLogTask.mode:type_name -> pb.SplitLogTask.RecoveryMode
	2,  // 7: pb.Table.state:type_name -> pb.Table.State
	18, // 8: pb.ReplicationPeer.data:type_name -> pb.BytesBytesPair
	19, // 9: pb.ReplicationPeer.configuration:type_name -> pb.NameStringPair
	3,  // 10: pb.ReplicationState.state:type_name -> pb.ReplicationState.State
	20, // 11: pb.TableLock.table_name:type_name -> pb.TableName
	16, // 12: pb.TableLock.lock_owner:type_name -> pb.ServerName
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ZooKeeper_proto_init() }
func file_ZooKeeper_proto_init() {
	if File_ZooKeeper_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_ClusterStatus_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ZooKeeper_proto_rawDesc), len(file_ZooKeeper_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ZooKeeper_proto_goTypes,
		DependencyIndexes: file_ZooKeeper_proto_depIdxs,
		EnumInfos:         file_ZooKeeper_proto_enumTypes,
		MessageInfos:      file_ZooKeeper_proto_msgTypes,
	}.Build()
	File_ZooKeeper_proto = out.File
	file_ZooKeeper_proto_goTypes = nil
	file_ZooKeeper_proto_depIdxs = nil
}
