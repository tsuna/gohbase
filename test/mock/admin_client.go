// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tsuna/gohbase (interfaces: AdminClient)
//
// Generated by this command:
//
//	mockgen -destination=admin_client.go -package=mock github.com/tsuna/gohbase AdminClient
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	hrpc "github.com/tsuna/gohbase/hrpc"
	pb "github.com/tsuna/gohbase/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockAdminClient is a mock of AdminClient interface.
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminClientMockRecorder
	isgomock struct{}
}

// MockAdminClientMockRecorder is the mock recorder for MockAdminClient.
type MockAdminClientMockRecorder struct {
	mock *MockAdminClient
}

// NewMockAdminClient creates a new mock instance.
func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &MockAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminClient) EXPECT() *MockAdminClientMockRecorder {
	return m.recorder
}

// ClusterStatus mocks base method.
func (m *MockAdminClient) ClusterStatus() (*pb.ClusterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterStatus")
	ret0, _ := ret[0].(*pb.ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterStatus indicates an expected call of ClusterStatus.
func (mr *MockAdminClientMockRecorder) ClusterStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterStatus", reflect.TypeOf((*MockAdminClient)(nil).ClusterStatus))
}

// CreateSnapshot mocks base method.
func (m *MockAdminClient) CreateSnapshot(t *hrpc.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockAdminClientMockRecorder) CreateSnapshot(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockAdminClient)(nil).CreateSnapshot), t)
}

// CreateTable mocks base method.
func (m *MockAdminClient) CreateTable(t *hrpc.CreateTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockAdminClientMockRecorder) CreateTable(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockAdminClient)(nil).CreateTable), t)
}

// DeleteSnapshot mocks base method.
func (m *MockAdminClient) DeleteSnapshot(t *hrpc.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockAdminClientMockRecorder) DeleteSnapshot(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockAdminClient)(nil).DeleteSnapshot), t)
}

// DeleteTable mocks base method.
func (m *MockAdminClient) DeleteTable(t *hrpc.DeleteTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockAdminClientMockRecorder) DeleteTable(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockAdminClient)(nil).DeleteTable), t)
}

// DisableTable mocks base method.
func (m *MockAdminClient) DisableTable(t *hrpc.DisableTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTable", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableTable indicates an expected call of DisableTable.
func (mr *MockAdminClientMockRecorder) DisableTable(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTable", reflect.TypeOf((*MockAdminClient)(nil).DisableTable), t)
}

// EnableTable mocks base method.
func (m *MockAdminClient) EnableTable(t *hrpc.EnableTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTable", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableTable indicates an expected call of EnableTable.
func (mr *MockAdminClientMockRecorder) EnableTable(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTable", reflect.TypeOf((*MockAdminClient)(nil).EnableTable), t)
}

// ListSnapshots mocks base method.
func (m *MockAdminClient) ListSnapshots(t *hrpc.ListSnapshots) ([]*pb.SnapshotDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", t)
	ret0, _ := ret[0].([]*pb.SnapshotDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockAdminClientMockRecorder) ListSnapshots(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockAdminClient)(nil).ListSnapshots), t)
}

// ListTableNames mocks base method.
func (m *MockAdminClient) ListTableNames(t *hrpc.ListTableNames) ([]*pb.TableName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableNames", t)
	ret0, _ := ret[0].([]*pb.TableName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableNames indicates an expected call of ListTableNames.
func (mr *MockAdminClientMockRecorder) ListTableNames(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableNames", reflect.TypeOf((*MockAdminClient)(nil).ListTableNames), t)
}

// MoveRegion mocks base method.
func (m *MockAdminClient) MoveRegion(mr *hrpc.MoveRegion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveRegion", mr)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveRegion indicates an expected call of MoveRegion.
func (mr_2 *MockAdminClientMockRecorder) MoveRegion(mr any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "MoveRegion", reflect.TypeOf((*MockAdminClient)(nil).MoveRegion), mr)
}

// RestoreSnapshot mocks base method.
func (m *MockAdminClient) RestoreSnapshot(t *hrpc.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshot", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockAdminClientMockRecorder) RestoreSnapshot(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockAdminClient)(nil).RestoreSnapshot), t)
}

// SetBalancer mocks base method.
func (m *MockAdminClient) SetBalancer(sb *hrpc.SetBalancer) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalancer", sb)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBalancer indicates an expected call of SetBalancer.
func (mr *MockAdminClientMockRecorder) SetBalancer(sb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalancer", reflect.TypeOf((*MockAdminClient)(nil).SetBalancer), sb)
}
