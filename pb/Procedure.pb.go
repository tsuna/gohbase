//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: Procedure.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcedureState int32

const (
	ProcedureState_INITIALIZING    ProcedureState = 1 // Procedure in construction, not yet added to the executor
	ProcedureState_RUNNABLE        ProcedureState = 2 // Procedure added to the executor, and ready to be executed
	ProcedureState_WAITING         ProcedureState = 3 // The procedure is waiting on children to be completed
	ProcedureState_WAITING_TIMEOUT ProcedureState = 4 // The procedure is waiting a timout or an external event
	ProcedureState_ROLLEDBACK      ProcedureState = 5 // The procedure failed and was rolledback
	ProcedureState_FINISHED        ProcedureState = 6 // The procedure execution is completed. may need a rollback if failed.
)

// Enum value maps for ProcedureState.
var (
	ProcedureState_name = map[int32]string{
		1: "INITIALIZING",
		2: "RUNNABLE",
		3: "WAITING",
		4: "WAITING_TIMEOUT",
		5: "ROLLEDBACK",
		6: "FINISHED",
	}
	ProcedureState_value = map[string]int32{
		"INITIALIZING":    1,
		"RUNNABLE":        2,
		"WAITING":         3,
		"WAITING_TIMEOUT": 4,
		"ROLLEDBACK":      5,
		"FINISHED":        6,
	}
)

func (x ProcedureState) Enum() *ProcedureState {
	p := new(ProcedureState)
	*p = x
	return p
}

func (x ProcedureState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureState) Descriptor() protoreflect.EnumDescriptor {
	return file_Procedure_proto_enumTypes[0].Descriptor()
}

func (ProcedureState) Type() protoreflect.EnumType {
	return &file_Procedure_proto_enumTypes[0]
}

func (x ProcedureState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcedureState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcedureState(num)
	return nil
}

// Deprecated: Use ProcedureState.Descriptor instead.
func (ProcedureState) EnumDescriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{0}
}

type ProcedureWALEntry_Type int32

const (
	ProcedureWALEntry_PROCEDURE_WAL_EOF     ProcedureWALEntry_Type = 1
	ProcedureWALEntry_PROCEDURE_WAL_INIT    ProcedureWALEntry_Type = 2
	ProcedureWALEntry_PROCEDURE_WAL_INSERT  ProcedureWALEntry_Type = 3
	ProcedureWALEntry_PROCEDURE_WAL_UPDATE  ProcedureWALEntry_Type = 4
	ProcedureWALEntry_PROCEDURE_WAL_DELETE  ProcedureWALEntry_Type = 5
	ProcedureWALEntry_PROCEDURE_WAL_COMPACT ProcedureWALEntry_Type = 6
)

// Enum value maps for ProcedureWALEntry_Type.
var (
	ProcedureWALEntry_Type_name = map[int32]string{
		1: "PROCEDURE_WAL_EOF",
		2: "PROCEDURE_WAL_INIT",
		3: "PROCEDURE_WAL_INSERT",
		4: "PROCEDURE_WAL_UPDATE",
		5: "PROCEDURE_WAL_DELETE",
		6: "PROCEDURE_WAL_COMPACT",
	}
	ProcedureWALEntry_Type_value = map[string]int32{
		"PROCEDURE_WAL_EOF":     1,
		"PROCEDURE_WAL_INIT":    2,
		"PROCEDURE_WAL_INSERT":  3,
		"PROCEDURE_WAL_UPDATE":  4,
		"PROCEDURE_WAL_DELETE":  5,
		"PROCEDURE_WAL_COMPACT": 6,
	}
)

func (x ProcedureWALEntry_Type) Enum() *ProcedureWALEntry_Type {
	p := new(ProcedureWALEntry_Type)
	*p = x
	return p
}

func (x ProcedureWALEntry_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureWALEntry_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_Procedure_proto_enumTypes[1].Descriptor()
}

func (ProcedureWALEntry_Type) Type() protoreflect.EnumType {
	return &file_Procedure_proto_enumTypes[1]
}

func (x ProcedureWALEntry_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcedureWALEntry_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcedureWALEntry_Type(num)
	return nil
}

// Deprecated: Use ProcedureWALEntry_Type.Descriptor instead.
func (ProcedureWALEntry_Type) EnumDescriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{6, 0}
}

// *
// Procedure metadata, serialized by the ProcedureStore to be able to recover the old state.
type Procedure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// internal "static" state
	ClassName *string `protobuf:"bytes,1,req,name=class_name,json=className" json:"class_name,omitempty"` // full classname to be able to instantiate the procedure
	ParentId  *uint64 `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`   // parent if not a root-procedure otherwise not set
	ProcId    *uint64 `protobuf:"varint,3,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	StartTime *uint64 `protobuf:"varint,4,req,name=start_time,json=startTime" json:"start_time,omitempty"`
	Owner     *string `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	// internal "runtime" state
	State      *ProcedureState `protobuf:"varint,6,req,name=state,enum=pb.ProcedureState" json:"state,omitempty"`
	StackId    []uint32        `protobuf:"varint,7,rep,name=stack_id,json=stackId" json:"stack_id,omitempty"` // stack indices in case the procedure was running
	LastUpdate *uint64         `protobuf:"varint,8,req,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Timeout    *uint32         `protobuf:"varint,9,opt,name=timeout" json:"timeout,omitempty"`
	// user state/results
	Exception *ForeignExceptionMessage `protobuf:"bytes,10,opt,name=exception" json:"exception,omitempty"`
	Result    []byte                   `protobuf:"bytes,11,opt,name=result" json:"result,omitempty"`                        // opaque (user) result structure
	StateData []byte                   `protobuf:"bytes,12,opt,name=state_data,json=stateData" json:"state_data,omitempty"` // opaque (user) procedure internal-state
	// Nonce to prevent same procedure submit by multiple times
	NonceGroup    *uint64 `protobuf:"varint,13,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce         *uint64 `protobuf:"varint,14,opt,name=nonce,def=0" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for Procedure fields.
const (
	Default_Procedure_NonceGroup = uint64(0)
	Default_Procedure_Nonce      = uint64(0)
)

func (x *Procedure) Reset() {
	*x = Procedure{}
	mi := &file_Procedure_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure) ProtoMessage() {}

func (x *Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure.ProtoReflect.Descriptor instead.
func (*Procedure) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{0}
}

func (x *Procedure) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *Procedure) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *Procedure) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

func (x *Procedure) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Procedure) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *Procedure) GetState() ProcedureState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ProcedureState_INITIALIZING
}

func (x *Procedure) GetStackId() []uint32 {
	if x != nil {
		return x.StackId
	}
	return nil
}

func (x *Procedure) GetLastUpdate() uint64 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *Procedure) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *Procedure) GetException() *ForeignExceptionMessage {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *Procedure) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Procedure) GetStateData() []byte {
	if x != nil {
		return x.StateData
	}
	return nil
}

func (x *Procedure) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_Procedure_NonceGroup
}

func (x *Procedure) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_Procedure_Nonce
}

// *
// SequentialProcedure data
type SequentialProcedureData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Executed      *bool                  `protobuf:"varint,1,req,name=executed" json:"executed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequentialProcedureData) Reset() {
	*x = SequentialProcedureData{}
	mi := &file_Procedure_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequentialProcedureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequentialProcedureData) ProtoMessage() {}

func (x *SequentialProcedureData) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequentialProcedureData.ProtoReflect.Descriptor instead.
func (*SequentialProcedureData) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{1}
}

func (x *SequentialProcedureData) GetExecuted() bool {
	if x != nil && x.Executed != nil {
		return *x.Executed
	}
	return false
}

// *
// StateMachineProcedure data
type StateMachineProcedureData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         []uint32               `protobuf:"varint,1,rep,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateMachineProcedureData) Reset() {
	*x = StateMachineProcedureData{}
	mi := &file_Procedure_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateMachineProcedureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMachineProcedureData) ProtoMessage() {}

func (x *StateMachineProcedureData) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMachineProcedureData.ProtoReflect.Descriptor instead.
func (*StateMachineProcedureData) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{2}
}

func (x *StateMachineProcedureData) GetState() []uint32 {
	if x != nil {
		return x.State
	}
	return nil
}

// *
// Procedure WAL header
type ProcedureWALHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *uint32                `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	Type          *uint32                `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	LogId         *uint64                `protobuf:"varint,3,req,name=log_id,json=logId" json:"log_id,omitempty"`
	MinProcId     *uint64                `protobuf:"varint,4,req,name=min_proc_id,json=minProcId" json:"min_proc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcedureWALHeader) Reset() {
	*x = ProcedureWALHeader{}
	mi := &file_Procedure_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcedureWALHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureWALHeader) ProtoMessage() {}

func (x *ProcedureWALHeader) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureWALHeader.ProtoReflect.Descriptor instead.
func (*ProcedureWALHeader) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{3}
}

func (x *ProcedureWALHeader) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *ProcedureWALHeader) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ProcedureWALHeader) GetLogId() uint64 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

func (x *ProcedureWALHeader) GetMinProcId() uint64 {
	if x != nil && x.MinProcId != nil {
		return *x.MinProcId
	}
	return 0
}

// *
// Procedure WAL trailer
type ProcedureWALTrailer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *uint32                `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	TrackerPos    *uint64                `protobuf:"varint,2,req,name=tracker_pos,json=trackerPos" json:"tracker_pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcedureWALTrailer) Reset() {
	*x = ProcedureWALTrailer{}
	mi := &file_Procedure_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcedureWALTrailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureWALTrailer) ProtoMessage() {}

func (x *ProcedureWALTrailer) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureWALTrailer.ProtoReflect.Descriptor instead.
func (*ProcedureWALTrailer) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{4}
}

func (x *ProcedureWALTrailer) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *ProcedureWALTrailer) GetTrackerPos() uint64 {
	if x != nil && x.TrackerPos != nil {
		return *x.TrackerPos
	}
	return 0
}

type ProcedureStoreTracker struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Node          []*ProcedureStoreTracker_TrackerNode `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcedureStoreTracker) Reset() {
	*x = ProcedureStoreTracker{}
	mi := &file_Procedure_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcedureStoreTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStoreTracker) ProtoMessage() {}

func (x *ProcedureStoreTracker) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStoreTracker.ProtoReflect.Descriptor instead.
func (*ProcedureStoreTracker) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{5}
}

func (x *ProcedureStoreTracker) GetNode() []*ProcedureStoreTracker_TrackerNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type ProcedureWALEntry struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          *ProcedureWALEntry_Type `protobuf:"varint,1,req,name=type,enum=pb.ProcedureWALEntry_Type" json:"type,omitempty"`
	Procedure     []*Procedure            `protobuf:"bytes,2,rep,name=procedure" json:"procedure,omitempty"`
	ProcId        *uint64                 `protobuf:"varint,3,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcedureWALEntry) Reset() {
	*x = ProcedureWALEntry{}
	mi := &file_Procedure_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcedureWALEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureWALEntry) ProtoMessage() {}

func (x *ProcedureWALEntry) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureWALEntry.ProtoReflect.Descriptor instead.
func (*ProcedureWALEntry) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{6}
}

func (x *ProcedureWALEntry) GetType() ProcedureWALEntry_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ProcedureWALEntry_PROCEDURE_WAL_EOF
}

func (x *ProcedureWALEntry) GetProcedure() []*Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *ProcedureWALEntry) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type ProcedureStoreTracker_TrackerNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartId       *uint64                `protobuf:"varint,1,req,name=start_id,json=startId" json:"start_id,omitempty"`
	Updated       []uint64               `protobuf:"varint,2,rep,name=updated" json:"updated,omitempty"`
	Deleted       []uint64               `protobuf:"varint,3,rep,name=deleted" json:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcedureStoreTracker_TrackerNode) Reset() {
	*x = ProcedureStoreTracker_TrackerNode{}
	mi := &file_Procedure_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcedureStoreTracker_TrackerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStoreTracker_TrackerNode) ProtoMessage() {}

func (x *ProcedureStoreTracker_TrackerNode) ProtoReflect() protoreflect.Message {
	mi := &file_Procedure_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStoreTracker_TrackerNode.ProtoReflect.Descriptor instead.
func (*ProcedureStoreTracker_TrackerNode) Descriptor() ([]byte, []int) {
	return file_Procedure_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ProcedureStoreTracker_TrackerNode) GetStartId() uint64 {
	if x != nil && x.StartId != nil {
		return *x.StartId
	}
	return 0
}

func (x *ProcedureStoreTracker_TrackerNode) GetUpdated() []uint64 {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *ProcedureStoreTracker_TrackerNode) GetDeleted() []uint64 {
	if x != nil {
		return x.Deleted
	}
	return nil
}

var File_Procedure_proto protoreflect.FileDescriptor

const file_Procedure_proto_rawDesc = "" +
	"\n" +
	"\x0fProcedure.proto\x12\x02pb\x1a\x13ErrorHandling.proto\"\xc4\x03\n" +
	"\tProcedure\x12\x1d\n" +
	"\n" +
	"class_name\x18\x01 \x02(\tR\tclassName\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\x04R\bparentId\x12\x17\n" +
	"\aproc_id\x18\x03 \x02(\x04R\x06procId\x12\x1d\n" +
	"\n" +
	"start_time\x18\x04 \x02(\x04R\tstartTime\x12\x14\n" +
	"\x05owner\x18\x05 \x01(\tR\x05owner\x12(\n" +
	"\x05state\x18\x06 \x02(\x0e2\x12.pb.ProcedureStateR\x05state\x12\x19\n" +
	"\bstack_id\x18\a \x03(\rR\astackId\x12\x1f\n" +
	"\vlast_update\x18\b \x02(\x04R\n" +
	"lastUpdate\x12\x18\n" +
	"\atimeout\x18\t \x01(\rR\atimeout\x129\n" +
	"\texception\x18\n" +
	" \x01(\v2\x1b.pb.ForeignExceptionMessageR\texception\x12\x16\n" +
	"\x06result\x18\v \x01(\fR\x06result\x12\x1d\n" +
	"\n" +
	"state_data\x18\f \x01(\fR\tstateData\x12\"\n" +
	"\vnonce_group\x18\r \x01(\x04:\x010R\n" +
	"nonceGroup\x12\x17\n" +
	"\x05nonce\x18\x0e \x01(\x04:\x010R\x05nonce\"5\n" +
	"\x17SequentialProcedureData\x12\x1a\n" +
	"\bexecuted\x18\x01 \x02(\bR\bexecuted\"1\n" +
	"\x19StateMachineProcedureData\x12\x14\n" +
	"\x05state\x18\x01 \x03(\rR\x05state\"y\n" +
	"\x12ProcedureWALHeader\x12\x18\n" +
	"\aversion\x18\x01 \x02(\rR\aversion\x12\x12\n" +
	"\x04type\x18\x02 \x02(\rR\x04type\x12\x15\n" +
	"\x06log_id\x18\x03 \x02(\x04R\x05logId\x12\x1e\n" +
	"\vmin_proc_id\x18\x04 \x02(\x04R\tminProcId\"P\n" +
	"\x13ProcedureWALTrailer\x12\x18\n" +
	"\aversion\x18\x01 \x02(\rR\aversion\x12\x1f\n" +
	"\vtracker_pos\x18\x02 \x02(\x04R\n" +
	"trackerPos\"\xb0\x01\n" +
	"\x15ProcedureStoreTracker\x129\n" +
	"\x04node\x18\x01 \x03(\v2%.pb.ProcedureStoreTracker.TrackerNodeR\x04node\x1a\\\n" +
	"\vTrackerNode\x12\x19\n" +
	"\bstart_id\x18\x01 \x02(\x04R\astartId\x12\x18\n" +
	"\aupdated\x18\x02 \x03(\x04R\aupdated\x12\x18\n" +
	"\adeleted\x18\x03 \x03(\x04R\adeleted\"\xaa\x02\n" +
	"\x11ProcedureWALEntry\x12.\n" +
	"\x04type\x18\x01 \x02(\x0e2\x1a.pb.ProcedureWALEntry.TypeR\x04type\x12+\n" +
	"\tprocedure\x18\x02 \x03(\v2\r.pb.ProcedureR\tprocedure\x12\x17\n" +
	"\aproc_id\x18\x03 \x01(\x04R\x06procId\"\x9e\x01\n" +
	"\x04Type\x12\x15\n" +
	"\x11PROCEDURE_WAL_EOF\x10\x01\x12\x16\n" +
	"\x12PROCEDURE_WAL_INIT\x10\x02\x12\x18\n" +
	"\x14PROCEDURE_WAL_INSERT\x10\x03\x12\x18\n" +
	"\x14PROCEDURE_WAL_UPDATE\x10\x04\x12\x18\n" +
	"\x14PROCEDURE_WAL_DELETE\x10\x05\x12\x19\n" +
	"\x15PROCEDURE_WAL_COMPACT\x10\x06*p\n" +
	"\x0eProcedureState\x12\x10\n" +
	"\fINITIALIZING\x10\x01\x12\f\n" +
	"\bRUNNABLE\x10\x02\x12\v\n" +
	"\aWAITING\x10\x03\x12\x13\n" +
	"\x0fWAITING_TIMEOUT\x10\x04\x12\x0e\n" +
	"\n" +
	"ROLLEDBACK\x10\x05\x12\f\n" +
	"\bFINISHED\x10\x06BL\n" +
	"*org.apache.hadoop.hbase.protobuf.generatedB\x0fProcedureProtosH\x01Z\x05../pb\x88\x01\x01\xa0\x01\x01"

var (
	file_Procedure_proto_rawDescOnce sync.Once
	file_Procedure_proto_rawDescData []byte
)

func file_Procedure_proto_rawDescGZIP() []byte {
	file_Procedure_proto_rawDescOnce.Do(func() {
		file_Procedure_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Procedure_proto_rawDesc), len(file_Procedure_proto_rawDesc)))
	})
	return file_Procedure_proto_rawDescData
}

var file_Procedure_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_Procedure_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_Procedure_proto_goTypes = []any{
	(ProcedureState)(0),                       // 0: pb.ProcedureState
	(ProcedureWALEntry_Type)(0),               // 1: pb.ProcedureWALEntry.Type
	(*Procedure)(nil),                         // 2: pb.Procedure
	(*SequentialProcedureData)(nil),           // 3: pb.SequentialProcedureData
	(*StateMachineProcedureData)(nil),         // 4: pb.StateMachineProcedureData
	(*ProcedureWALHeader)(nil),                // 5: pb.ProcedureWALHeader
	(*ProcedureWALTrailer)(nil),               // 6: pb.ProcedureWALTrailer
	(*ProcedureStoreTracker)(nil),             // 7: pb.ProcedureStoreTracker
	(*ProcedureWALEntry)(nil),                 // 8: pb.ProcedureWALEntry
	(*ProcedureStoreTracker_TrackerNode)(nil), // 9: pb.ProcedureStoreTracker.TrackerNode
	(*ForeignExceptionMessage)(nil),           // 10: pb.ForeignExceptionMessage
}
var file_Procedure_proto_depIdxs = []int32{
	0,  // 0: pb.Procedure.state:type_name -> pb.ProcedureState
	10, // 1: pb.Procedure.exception:type_name -> pb.ForeignExceptionMessage
	9,  // 2: pb.ProcedureStoreTracker.node:type_name -> pb.ProcedureStoreTracker.TrackerNode
	1,  // 3: pb.ProcedureWALEntry.type:type_name -> pb.ProcedureWALEntry.Type
	2,  // 4: pb.ProcedureWALEntry.procedure:type_name -> pb.Procedure
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_Procedure_proto_init() }
func file_Procedure_proto_init() {
	if File_Procedure_proto != nil {
		return
	}
	file_ErrorHandling_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Procedure_proto_rawDesc), len(file_Procedure_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Procedure_proto_goTypes,
		DependencyIndexes: file_Procedure_proto_depIdxs,
		EnumInfos:         file_Procedure_proto_enumTypes,
		MessageInfos:      file_Procedure_proto_msgTypes,
	}.Build()
	File_Procedure_proto = out.File
	file_Procedure_proto_goTypes = nil
	file_Procedure_proto_depIdxs = nil
}
