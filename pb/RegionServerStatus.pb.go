// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RegionServerStatus.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegionStateTransition_TransitionCode int32

const (
	RegionStateTransition_OPENED      RegionStateTransition_TransitionCode = 0
	RegionStateTransition_FAILED_OPEN RegionStateTransition_TransitionCode = 1
	// * No failed_close, in which case region server will abort
	RegionStateTransition_CLOSED RegionStateTransition_TransitionCode = 2
	// * Ask master for ok to split/merge region(s)
	RegionStateTransition_READY_TO_SPLIT RegionStateTransition_TransitionCode = 3
	RegionStateTransition_READY_TO_MERGE RegionStateTransition_TransitionCode = 4
	RegionStateTransition_SPLIT_PONR     RegionStateTransition_TransitionCode = 5
	RegionStateTransition_MERGE_PONR     RegionStateTransition_TransitionCode = 6
	RegionStateTransition_SPLIT          RegionStateTransition_TransitionCode = 7
	RegionStateTransition_MERGED         RegionStateTransition_TransitionCode = 8
	RegionStateTransition_SPLIT_REVERTED RegionStateTransition_TransitionCode = 9
	RegionStateTransition_MERGE_REVERTED RegionStateTransition_TransitionCode = 10
)

var RegionStateTransition_TransitionCode_name = map[int32]string{
	0:  "OPENED",
	1:  "FAILED_OPEN",
	2:  "CLOSED",
	3:  "READY_TO_SPLIT",
	4:  "READY_TO_MERGE",
	5:  "SPLIT_PONR",
	6:  "MERGE_PONR",
	7:  "SPLIT",
	8:  "MERGED",
	9:  "SPLIT_REVERTED",
	10: "MERGE_REVERTED",
}
var RegionStateTransition_TransitionCode_value = map[string]int32{
	"OPENED":         0,
	"FAILED_OPEN":    1,
	"CLOSED":         2,
	"READY_TO_SPLIT": 3,
	"READY_TO_MERGE": 4,
	"SPLIT_PONR":     5,
	"MERGE_PONR":     6,
	"SPLIT":          7,
	"MERGED":         8,
	"SPLIT_REVERTED": 9,
	"MERGE_REVERTED": 10,
}

func (x RegionStateTransition_TransitionCode) Enum() *RegionStateTransition_TransitionCode {
	p := new(RegionStateTransition_TransitionCode)
	*p = x
	return p
}
func (x RegionStateTransition_TransitionCode) String() string {
	return proto.EnumName(RegionStateTransition_TransitionCode_name, int32(x))
}
func (x *RegionStateTransition_TransitionCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegionStateTransition_TransitionCode_value, data, "RegionStateTransition_TransitionCode")
	if err != nil {
		return err
	}
	*x = RegionStateTransition_TransitionCode(value)
	return nil
}
func (RegionStateTransition_TransitionCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor16, []int{8, 0}
}

type RegionServerStartupRequest struct {
	// * Port number this regionserver is up on
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	// * This servers' startcode
	ServerStartCode *uint64 `protobuf:"varint,2,req,name=server_start_code,json=serverStartCode" json:"server_start_code,omitempty"`
	// * Current time of the region server in ms
	ServerCurrentTime *uint64 `protobuf:"varint,3,req,name=server_current_time,json=serverCurrentTime" json:"server_current_time,omitempty"`
	// * hostname for region server, optional
	UseThisHostnameInstead *string `protobuf:"bytes,4,opt,name=use_this_hostname_instead,json=useThisHostnameInstead" json:"use_this_hostname_instead,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *RegionServerStartupRequest) Reset()                    { *m = RegionServerStartupRequest{} }
func (m *RegionServerStartupRequest) String() string            { return proto.CompactTextString(m) }
func (*RegionServerStartupRequest) ProtoMessage()               {}
func (*RegionServerStartupRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *RegionServerStartupRequest) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *RegionServerStartupRequest) GetServerStartCode() uint64 {
	if m != nil && m.ServerStartCode != nil {
		return *m.ServerStartCode
	}
	return 0
}

func (m *RegionServerStartupRequest) GetServerCurrentTime() uint64 {
	if m != nil && m.ServerCurrentTime != nil {
		return *m.ServerCurrentTime
	}
	return 0
}

func (m *RegionServerStartupRequest) GetUseThisHostnameInstead() string {
	if m != nil && m.UseThisHostnameInstead != nil {
		return *m.UseThisHostnameInstead
	}
	return ""
}

type RegionServerStartupResponse struct {
	// *
	// Configuration for the regionserver to use: e.g. filesystem,
	// hbase rootdir, the hostname to use creating the RegionServer ServerName,
	// etc
	MapEntries       []*NameStringPair `protobuf:"bytes,1,rep,name=map_entries,json=mapEntries" json:"map_entries,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RegionServerStartupResponse) Reset()                    { *m = RegionServerStartupResponse{} }
func (m *RegionServerStartupResponse) String() string            { return proto.CompactTextString(m) }
func (*RegionServerStartupResponse) ProtoMessage()               {}
func (*RegionServerStartupResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *RegionServerStartupResponse) GetMapEntries() []*NameStringPair {
	if m != nil {
		return m.MapEntries
	}
	return nil
}

type RegionServerReportRequest struct {
	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	// * load the server is under
	Load             *ServerLoad `protobuf:"bytes,2,opt,name=load" json:"load,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RegionServerReportRequest) Reset()                    { *m = RegionServerReportRequest{} }
func (m *RegionServerReportRequest) String() string            { return proto.CompactTextString(m) }
func (*RegionServerReportRequest) ProtoMessage()               {}
func (*RegionServerReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *RegionServerReportRequest) GetServer() *ServerName {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *RegionServerReportRequest) GetLoad() *ServerLoad {
	if m != nil {
		return m.Load
	}
	return nil
}

type RegionServerReportResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegionServerReportResponse) Reset()                    { *m = RegionServerReportResponse{} }
func (m *RegionServerReportResponse) String() string            { return proto.CompactTextString(m) }
func (*RegionServerReportResponse) ProtoMessage()               {}
func (*RegionServerReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

type ReportRSFatalErrorRequest struct {
	// * name of the server experiencing the error
	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	// * informative text to expose in the master logs and UI
	ErrorMessage     *string `protobuf:"bytes,2,req,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReportRSFatalErrorRequest) Reset()                    { *m = ReportRSFatalErrorRequest{} }
func (m *ReportRSFatalErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRSFatalErrorRequest) ProtoMessage()               {}
func (*ReportRSFatalErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

func (m *ReportRSFatalErrorRequest) GetServer() *ServerName {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *ReportRSFatalErrorRequest) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

type ReportRSFatalErrorResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReportRSFatalErrorResponse) Reset()                    { *m = ReportRSFatalErrorResponse{} }
func (m *ReportRSFatalErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportRSFatalErrorResponse) ProtoMessage()               {}
func (*ReportRSFatalErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

type GetLastFlushedSequenceIdRequest struct {
	// * region name
	RegionName       []byte `protobuf:"bytes,1,req,name=region_name,json=regionName" json:"region_name,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetLastFlushedSequenceIdRequest) Reset()         { *m = GetLastFlushedSequenceIdRequest{} }
func (m *GetLastFlushedSequenceIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetLastFlushedSequenceIdRequest) ProtoMessage()    {}
func (*GetLastFlushedSequenceIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{6}
}

func (m *GetLastFlushedSequenceIdRequest) GetRegionName() []byte {
	if m != nil {
		return m.RegionName
	}
	return nil
}

type GetLastFlushedSequenceIdResponse struct {
	// * the last WAL sequence id flushed from MemStore to HFile for the region
	LastFlushedSequenceId *uint64 `protobuf:"varint,1,req,name=last_flushed_sequence_id,json=lastFlushedSequenceId" json:"last_flushed_sequence_id,omitempty"`
	// * the last WAL sequence id flushed from MemStore to HFile for stores of the region
	StoreLastFlushedSequenceId []*StoreSequenceId `protobuf:"bytes,2,rep,name=store_last_flushed_sequence_id,json=storeLastFlushedSequenceId" json:"store_last_flushed_sequence_id,omitempty"`
	XXX_unrecognized           []byte             `json:"-"`
}

func (m *GetLastFlushedSequenceIdResponse) Reset()         { *m = GetLastFlushedSequenceIdResponse{} }
func (m *GetLastFlushedSequenceIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetLastFlushedSequenceIdResponse) ProtoMessage()    {}
func (*GetLastFlushedSequenceIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{7}
}

func (m *GetLastFlushedSequenceIdResponse) GetLastFlushedSequenceId() uint64 {
	if m != nil && m.LastFlushedSequenceId != nil {
		return *m.LastFlushedSequenceId
	}
	return 0
}

func (m *GetLastFlushedSequenceIdResponse) GetStoreLastFlushedSequenceId() []*StoreSequenceId {
	if m != nil {
		return m.StoreLastFlushedSequenceId
	}
	return nil
}

type RegionStateTransition struct {
	TransitionCode *RegionStateTransition_TransitionCode `protobuf:"varint,1,req,name=transition_code,json=transitionCode,enum=pb.RegionStateTransition_TransitionCode" json:"transition_code,omitempty"`
	// * Mutliple regions are involved during merging/splitting
	RegionInfo []*RegionInfo `protobuf:"bytes,2,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	// * For newly opened region, the open seq num is needed
	OpenSeqNum       *uint64 `protobuf:"varint,3,opt,name=open_seq_num,json=openSeqNum" json:"open_seq_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RegionStateTransition) Reset()                    { *m = RegionStateTransition{} }
func (m *RegionStateTransition) String() string            { return proto.CompactTextString(m) }
func (*RegionStateTransition) ProtoMessage()               {}
func (*RegionStateTransition) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

func (m *RegionStateTransition) GetTransitionCode() RegionStateTransition_TransitionCode {
	if m != nil && m.TransitionCode != nil {
		return *m.TransitionCode
	}
	return RegionStateTransition_OPENED
}

func (m *RegionStateTransition) GetRegionInfo() []*RegionInfo {
	if m != nil {
		return m.RegionInfo
	}
	return nil
}

func (m *RegionStateTransition) GetOpenSeqNum() uint64 {
	if m != nil && m.OpenSeqNum != nil {
		return *m.OpenSeqNum
	}
	return 0
}

type ReportRegionStateTransitionRequest struct {
	// * This region server's server name
	Server           *ServerName              `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	Transition       []*RegionStateTransition `protobuf:"bytes,2,rep,name=transition" json:"transition,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *ReportRegionStateTransitionRequest) Reset()         { *m = ReportRegionStateTransitionRequest{} }
func (m *ReportRegionStateTransitionRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRegionStateTransitionRequest) ProtoMessage()    {}
func (*ReportRegionStateTransitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{9}
}

func (m *ReportRegionStateTransitionRequest) GetServer() *ServerName {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *ReportRegionStateTransitionRequest) GetTransition() []*RegionStateTransition {
	if m != nil {
		return m.Transition
	}
	return nil
}

type ReportRegionStateTransitionResponse struct {
	// * Error message if failed to update the region state
	ErrorMessage     *string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReportRegionStateTransitionResponse) Reset()         { *m = ReportRegionStateTransitionResponse{} }
func (m *ReportRegionStateTransitionResponse) String() string { return proto.CompactTextString(m) }
func (*ReportRegionStateTransitionResponse) ProtoMessage()    {}
func (*ReportRegionStateTransitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{10}
}

func (m *ReportRegionStateTransitionResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*RegionServerStartupRequest)(nil), "pb.RegionServerStartupRequest")
	proto.RegisterType((*RegionServerStartupResponse)(nil), "pb.RegionServerStartupResponse")
	proto.RegisterType((*RegionServerReportRequest)(nil), "pb.RegionServerReportRequest")
	proto.RegisterType((*RegionServerReportResponse)(nil), "pb.RegionServerReportResponse")
	proto.RegisterType((*ReportRSFatalErrorRequest)(nil), "pb.ReportRSFatalErrorRequest")
	proto.RegisterType((*ReportRSFatalErrorResponse)(nil), "pb.ReportRSFatalErrorResponse")
	proto.RegisterType((*GetLastFlushedSequenceIdRequest)(nil), "pb.GetLastFlushedSequenceIdRequest")
	proto.RegisterType((*GetLastFlushedSequenceIdResponse)(nil), "pb.GetLastFlushedSequenceIdResponse")
	proto.RegisterType((*RegionStateTransition)(nil), "pb.RegionStateTransition")
	proto.RegisterType((*ReportRegionStateTransitionRequest)(nil), "pb.ReportRegionStateTransitionRequest")
	proto.RegisterType((*ReportRegionStateTransitionResponse)(nil), "pb.ReportRegionStateTransitionResponse")
	proto.RegisterEnum("pb.RegionStateTransition_TransitionCode", RegionStateTransition_TransitionCode_name, RegionStateTransition_TransitionCode_value)
}

func init() { proto.RegisterFile("RegionServerStatus.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x2d, 0x25, 0xc5, 0xad, 0x47, 0x8e, 0xac, 0xae, 0x91, 0x82, 0x56, 0x5b, 0x5b, 0xa0, 0x8b,
	0x54, 0xc8, 0x81, 0x05, 0xdc, 0x43, 0x91, 0x63, 0x6c, 0xd1, 0xb1, 0x0a, 0x45, 0x56, 0x97, 0x42,
	0x8a, 0x9e, 0x16, 0x6b, 0x71, 0x2c, 0x11, 0x10, 0xb9, 0xcc, 0xee, 0xb2, 0xe7, 0xde, 0xda, 0xcf,
	0xe8, 0x47, 0xf4, 0x03, 0x7a, 0xeb, 0x0f, 0xf5, 0x03, 0x82, 0xe5, 0x52, 0xb6, 0x68, 0x8b, 0x0e,
	0x7c, 0xdb, 0x9d, 0x79, 0xf3, 0xe6, 0xed, 0x0c, 0x67, 0x08, 0x2e, 0xc5, 0x45, 0x2c, 0xd2, 0x10,
	0xe5, 0xef, 0x28, 0x43, 0xcd, 0x75, 0xae, 0xfc, 0x4c, 0x0a, 0x2d, 0x48, 0x23, 0xbb, 0xee, 0xb5,
	0x2f, 0xcf, 0xb8, 0x42, 0x6b, 0xe8, 0x1d, 0x9c, 0xaf, 0x72, 0xa5, 0xab, 0x28, 0xef, 0x3f, 0x07,
	0x7a, 0xf7, 0x28, 0xa4, 0xce, 0x33, 0x8a, 0x1f, 0x72, 0x54, 0x9a, 0x10, 0x68, 0x65, 0x42, 0x6a,
	0xd7, 0xe9, 0x37, 0x06, 0xcf, 0x69, 0x71, 0x26, 0xaf, 0xe0, 0x4b, 0x55, 0x60, 0x99, 0x32, 0x60,
	0x36, 0x17, 0x11, 0xba, 0x8d, 0x7e, 0x63, 0xd0, 0xa2, 0xfb, 0xea, 0x8e, 0xe4, 0x5c, 0x44, 0x48,
	0x7c, 0x38, 0x28, 0xb1, 0xf3, 0x5c, 0x4a, 0x4c, 0x35, 0xd3, 0x71, 0x82, 0x6e, 0xb3, 0x40, 0x97,
	0x34, 0xe7, 0xd6, 0x33, 0x8b, 0x13, 0x24, 0xaf, 0xe1, 0x30, 0x57, 0xc8, 0xf4, 0x32, 0x56, 0x6c,
	0x29, 0x94, 0x4e, 0x79, 0x82, 0x2c, 0x4e, 0x95, 0x46, 0x1e, 0xb9, 0xad, 0xbe, 0x33, 0xd8, 0xa5,
	0x5f, 0xe5, 0x0a, 0x67, 0xcb, 0x58, 0x5d, 0x96, 0xee, 0x91, 0xf5, 0x7a, 0x14, 0xbe, 0xde, 0xfa,
	0x10, 0x95, 0x89, 0x54, 0x21, 0xf9, 0x11, 0xda, 0x09, 0xcf, 0x18, 0xa6, 0x5a, 0xc6, 0xa8, 0x5c,
	0xa7, 0xdf, 0x1c, 0xb4, 0x4f, 0x89, 0x9f, 0x5d, 0xfb, 0x13, 0x9e, 0x60, 0xa8, 0x65, 0x9c, 0x2e,
	0xa6, 0x3c, 0x96, 0x14, 0x12, 0x9e, 0x05, 0x16, 0xe5, 0x2d, 0xe0, 0x70, 0x93, 0x93, 0xa2, 0x29,
	0xc0, 0xba, 0x36, 0x2f, 0x61, 0xc7, 0x3e, 0xa0, 0xa8, 0x4e, 0xfb, 0xb4, 0x63, 0xc8, 0x2c, 0xd0,
	0x50, 0xd2, 0xd2, 0x4b, 0x3c, 0x68, 0xad, 0x04, 0x8f, 0xdc, 0x46, 0xdf, 0xa9, 0xa2, 0xc6, 0x82,
	0x47, 0xb4, 0xf0, 0x79, 0xdf, 0x54, 0xbb, 0xb0, 0x4e, 0x64, 0xb5, 0x7b, 0x4b, 0x23, 0xa3, 0xb0,
	0x84, 0x17, 0x5c, 0xf3, 0x55, 0x20, 0xa5, 0x90, 0x4f, 0x95, 0x71, 0x02, 0xcf, 0xd1, 0xc4, 0xb1,
	0x04, 0x95, 0xe2, 0x0b, 0xdb, 0xb2, 0x5d, 0xba, 0x57, 0x18, 0xdf, 0x59, 0x9b, 0xd5, 0xf1, 0x30,
	0x53, 0xa9, 0xe3, 0x0c, 0x8e, 0xdf, 0xa2, 0x1e, 0x73, 0xa5, 0x2f, 0x56, 0xb9, 0x5a, 0x62, 0x14,
	0x1a, 0x0d, 0xe9, 0x1c, 0x47, 0xd1, 0x5a, 0xcd, 0x31, 0xb4, 0x65, 0xf1, 0x10, 0x66, 0x7a, 0x53,
	0x48, 0xda, 0xa3, 0x60, 0x4d, 0x46, 0x8e, 0xf7, 0x8f, 0x03, 0xfd, 0x7a, 0x92, 0xb2, 0x59, 0x3f,
	0x81, 0xbb, 0xe2, 0x4a, 0xb3, 0x1b, 0x8b, 0x60, 0xaa, 0x84, 0xb0, 0x38, 0x2a, 0x28, 0x5b, 0xf4,
	0xc5, 0x6a, 0x1b, 0x01, 0xf9, 0x15, 0x8e, 0x94, 0x16, 0x12, 0x59, 0x6d, 0x78, 0xa3, 0x68, 0xfc,
	0x41, 0x51, 0x24, 0x83, 0xdc, 0xc8, 0xde, 0x2b, 0x42, 0xb7, 0x2a, 0xf3, 0xfe, 0x68, 0xc2, 0x8b,
	0xb2, 0x43, 0x9a, 0x6b, 0x9c, 0x49, 0x9e, 0xaa, 0x58, 0xc7, 0x22, 0x25, 0xbf, 0xc0, 0xbe, 0xbe,
	0xbd, 0xd9, 0x61, 0x30, 0x12, 0x3b, 0xa7, 0x03, 0x93, 0x63, 0x6b, 0x8c, 0x7f, 0x77, 0x34, 0x53,
	0x42, 0x3b, 0xba, 0x72, 0x27, 0x3f, 0xdc, 0x16, 0x31, 0x4e, 0x6f, 0x44, 0x29, 0xb9, 0x73, 0x47,
	0x37, 0x4a, 0x6f, 0xc4, 0xba, 0xa8, 0xe6, 0x4c, 0xfa, 0xb0, 0x27, 0x32, 0x4c, 0xcd, 0x43, 0x59,
	0x9a, 0x27, 0x6e, 0xb3, 0xef, 0x0c, 0x5a, 0x14, 0x8c, 0x2d, 0xc4, 0x0f, 0x93, 0x3c, 0xf1, 0xfe,
	0x75, 0xa0, 0x53, 0xcd, 0x4a, 0x00, 0x76, 0xae, 0xa6, 0xc1, 0x24, 0x18, 0x76, 0x3f, 0x23, 0xfb,
	0xd0, 0xbe, 0x78, 0x33, 0x1a, 0x07, 0x43, 0x66, 0x4c, 0x5d, 0xc7, 0x38, 0xcf, 0xc7, 0x57, 0x61,
	0x30, 0xec, 0x36, 0x08, 0x81, 0x0e, 0x0d, 0xde, 0x0c, 0x7f, 0x63, 0xb3, 0x2b, 0x16, 0x4e, 0xc7,
	0xa3, 0x59, 0xb7, 0x59, 0xb1, 0xbd, 0x0b, 0xe8, 0xdb, 0xa0, 0xdb, 0x22, 0x1d, 0x80, 0xc2, 0xcd,
	0xa6, 0x57, 0x13, 0xda, 0x7d, 0x66, 0xee, 0x85, 0xcb, 0xde, 0x77, 0xc8, 0x2e, 0x3c, 0xb3, 0xe1,
	0x9f, 0x1b, 0xfa, 0xc2, 0x35, 0xec, 0x7e, 0x61, 0xa8, 0x6c, 0x18, 0x0d, 0xde, 0x07, 0x74, 0x16,
	0x0c, 0xbb, 0xbb, 0xc6, 0x66, 0x43, 0x6f, 0x6d, 0xe0, 0xfd, 0xe9, 0x80, 0xb7, 0x1e, 0x8c, 0x2d,
	0x45, 0x7d, 0xea, 0x3c, 0xbc, 0x06, 0xb8, 0x2b, 0x7b, 0x59, 0xe3, 0xc3, 0xda, 0x96, 0xd1, 0x0d,
	0xb0, 0xf7, 0x33, 0x9c, 0x3c, 0x2a, 0xa4, 0xfc, 0x8a, 0x1f, 0x4c, 0x9c, 0x53, 0x2c, 0xb0, 0xca,
	0xc4, 0x9d, 0xfe, 0xdf, 0xac, 0xee, 0x18, 0xbb, 0x9d, 0xcd, 0x39, 0x9e, 0x23, 0x79, 0x0f, 0x07,
	0x5b, 0x96, 0x1a, 0x39, 0xda, 0xd0, 0xb9, 0x65, 0x6d, 0xf7, 0x8e, 0x6b, 0xfd, 0xa5, 0xb4, 0x10,
	0xc8, 0xc3, 0x7d, 0x43, 0xbe, 0xbd, 0x1f, 0x56, 0x59, 0x78, 0xbd, 0xa3, 0x3a, 0xf7, 0x26, 0xe9,
	0xfd, 0xe5, 0xb1, 0x26, 0xad, 0x59, 0x5f, 0x6b, 0xd2, 0xba, 0x9d, 0x43, 0x10, 0xdc, 0xba, 0x75,
	0x41, 0x4e, 0x4c, 0xec, 0x27, 0x36, 0x52, 0xef, 0xbb, 0xc7, 0x41, 0x65, 0x9a, 0xd4, 0xfc, 0x3d,
	0x6a, 0x5b, 0x4a, 0x5e, 0x6e, 0xa8, 0x7c, 0xe4, 0xe3, 0xeb, 0x7d, 0xff, 0x49, 0x9c, 0xcd, 0x77,
	0x36, 0x81, 0x57, 0x42, 0x2e, 0x7c, 0x9e, 0xf1, 0xf9, 0x12, 0xfd, 0x25, 0x8f, 0x84, 0xc8, 0xfc,
	0xe5, 0xf5, 0xed, 0xdf, 0xfa, 0x3a, 0xbf, 0xf1, 0x17, 0x98, 0xa2, 0xe4, 0x1a, 0xa3, 0xb3, 0x2d,
	0x7f, 0xf9, 0xa9, 0x41, 0xa9, 0x4b, 0xe7, 0x2f, 0xc7, 0xf9, 0xdb, 0x71, 0x3e, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x12, 0x1f, 0xbe, 0x69, 0x08, 0x08, 0x00, 0x00,
}
