//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: RPC.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// User Information proto.  Included in ConnectionHeader on connection setup
type UserInformation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EffectiveUser *string                `protobuf:"bytes,1,req,name=effective_user,json=effectiveUser" json:"effective_user,omitempty"`
	RealUser      *string                `protobuf:"bytes,2,opt,name=real_user,json=realUser" json:"real_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInformation) Reset() {
	*x = UserInformation{}
	mi := &file_RPC_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInformation) ProtoMessage() {}

func (x *UserInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInformation.ProtoReflect.Descriptor instead.
func (*UserInformation) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{0}
}

func (x *UserInformation) GetEffectiveUser() string {
	if x != nil && x.EffectiveUser != nil {
		return *x.EffectiveUser
	}
	return ""
}

func (x *UserInformation) GetRealUser() string {
	if x != nil && x.RealUser != nil {
		return *x.RealUser
	}
	return ""
}

// This is sent on connection setup after the connection preamble is sent.
type ConnectionHeader struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	UserInfo    *UserInformation       `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	ServiceName *string                `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Cell block codec we will use sending over optional cell blocks.  Server throws exception
	// if cannot deal.  Null means no codec'ing going on so we are pb all the time (SLOW!!!)
	CellBlockCodecClass *string `protobuf:"bytes,3,opt,name=cell_block_codec_class,json=cellBlockCodecClass" json:"cell_block_codec_class,omitempty"`
	// Compressor we will use if cell block is compressed.  Server will throw exception if not supported.
	// Class must implement hadoop's CompressionCodec Interface.  Can't compress if no codec.
	CellBlockCompressorClass *string      `protobuf:"bytes,4,opt,name=cell_block_compressor_class,json=cellBlockCompressorClass" json:"cell_block_compressor_class,omitempty"`
	VersionInfo              *VersionInfo `protobuf:"bytes,5,opt,name=version_info,json=versionInfo" json:"version_info,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ConnectionHeader) Reset() {
	*x = ConnectionHeader{}
	mi := &file_RPC_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionHeader) ProtoMessage() {}

func (x *ConnectionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionHeader.ProtoReflect.Descriptor instead.
func (*ConnectionHeader) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionHeader) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ConnectionHeader) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *ConnectionHeader) GetCellBlockCodecClass() string {
	if x != nil && x.CellBlockCodecClass != nil {
		return *x.CellBlockCodecClass
	}
	return ""
}

func (x *ConnectionHeader) GetCellBlockCompressorClass() string {
	if x != nil && x.CellBlockCompressorClass != nil {
		return *x.CellBlockCompressorClass
	}
	return ""
}

func (x *ConnectionHeader) GetVersionInfo() *VersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

// Optional Cell block Message.  Included in client RequestHeader
type CellBlockMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Length of the following cell block.  Could calculate it but convenient having it too hand.
	Length        *uint32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CellBlockMeta) Reset() {
	*x = CellBlockMeta{}
	mi := &file_RPC_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellBlockMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBlockMeta) ProtoMessage() {}

func (x *CellBlockMeta) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBlockMeta.ProtoReflect.Descriptor instead.
func (*CellBlockMeta) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{2}
}

func (x *CellBlockMeta) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

// At the RPC layer, this message is used to carry
// the server side exception to the RPC client.
type ExceptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Class name of the exception thrown from the server
	ExceptionClassName *string `protobuf:"bytes,1,opt,name=exception_class_name,json=exceptionClassName" json:"exception_class_name,omitempty"`
	// Exception stack trace from the server side
	StackTrace *string `protobuf:"bytes,2,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	// Optional hostname.  Filled in for some exceptions such as region moved
	// where exception gives clue on where the region may have moved.
	Hostname *string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Port     *int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	// Set if we are NOT to retry on receipt of this exception
	DoNotRetry    *bool `protobuf:"varint,5,opt,name=do_not_retry,json=doNotRetry" json:"do_not_retry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExceptionResponse) Reset() {
	*x = ExceptionResponse{}
	mi := &file_RPC_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptionResponse) ProtoMessage() {}

func (x *ExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptionResponse.ProtoReflect.Descriptor instead.
func (*ExceptionResponse) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{3}
}

func (x *ExceptionResponse) GetExceptionClassName() string {
	if x != nil && x.ExceptionClassName != nil {
		return *x.ExceptionClassName
	}
	return ""
}

func (x *ExceptionResponse) GetStackTrace() string {
	if x != nil && x.StackTrace != nil {
		return *x.StackTrace
	}
	return ""
}

func (x *ExceptionResponse) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *ExceptionResponse) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *ExceptionResponse) GetDoNotRetry() bool {
	if x != nil && x.DoNotRetry != nil {
		return *x.DoNotRetry
	}
	return false
}

// Header sent making a request.
type RequestHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Monotonically increasing call_id to keep track of RPC requests and their response
	CallId     *uint32   `protobuf:"varint,1,opt,name=call_id,json=callId" json:"call_id,omitempty"`
	TraceInfo  *RPCTInfo `protobuf:"bytes,2,opt,name=trace_info,json=traceInfo" json:"trace_info,omitempty"`
	MethodName *string   `protobuf:"bytes,3,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	// If true, then a pb Message param follows.
	RequestParam *bool `protobuf:"varint,4,opt,name=request_param,json=requestParam" json:"request_param,omitempty"`
	// If present, then an encoded data block follows.
	CellBlockMeta *CellBlockMeta `protobuf:"bytes,5,opt,name=cell_block_meta,json=cellBlockMeta" json:"cell_block_meta,omitempty"`
	// 0 is NORMAL priority.  200 is HIGH.  If no priority, treat it as NORMAL.
	// See HConstants.
	Priority      *uint32 `protobuf:"varint,6,opt,name=priority" json:"priority,omitempty"`
	Timeout       *uint32 `protobuf:"varint,7,opt,name=timeout" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestHeader) Reset() {
	*x = RequestHeader{}
	mi := &file_RPC_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeader) ProtoMessage() {}

func (x *RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeader.ProtoReflect.Descriptor instead.
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{4}
}

func (x *RequestHeader) GetCallId() uint32 {
	if x != nil && x.CallId != nil {
		return *x.CallId
	}
	return 0
}

func (x *RequestHeader) GetTraceInfo() *RPCTInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

func (x *RequestHeader) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *RequestHeader) GetRequestParam() bool {
	if x != nil && x.RequestParam != nil {
		return *x.RequestParam
	}
	return false
}

func (x *RequestHeader) GetCellBlockMeta() *CellBlockMeta {
	if x != nil {
		return x.CellBlockMeta
	}
	return nil
}

func (x *RequestHeader) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *RequestHeader) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type ResponseHeader struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	CallId *uint32                `protobuf:"varint,1,opt,name=call_id,json=callId" json:"call_id,omitempty"`
	// If present, then request threw an exception and no response message (else we presume one)
	Exception *ExceptionResponse `protobuf:"bytes,2,opt,name=exception" json:"exception,omitempty"`
	// If present, then an encoded data block follows.
	CellBlockMeta *CellBlockMeta `protobuf:"bytes,3,opt,name=cell_block_meta,json=cellBlockMeta" json:"cell_block_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	mi := &file_RPC_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseHeader) GetCallId() uint32 {
	if x != nil && x.CallId != nil {
		return *x.CallId
	}
	return 0
}

func (x *ResponseHeader) GetException() *ExceptionResponse {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *ResponseHeader) GetCellBlockMeta() *CellBlockMeta {
	if x != nil {
		return x.CellBlockMeta
	}
	return nil
}

var File_RPC_proto protoreflect.FileDescriptor

const file_RPC_proto_rawDesc = "" +
	"\n" +
	"\tRPC.proto\x12\x02pb\x1a\rTracing.proto\x1a\vHBase.proto\"U\n" +
	"\x0fUserInformation\x12%\n" +
	"\x0eeffective_user\x18\x01 \x02(\tR\reffectiveUser\x12\x1b\n" +
	"\treal_user\x18\x02 \x01(\tR\brealUser\"\x8f\x02\n" +
	"\x10ConnectionHeader\x120\n" +
	"\tuser_info\x18\x01 \x01(\v2\x13.pb.UserInformationR\buserInfo\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x123\n" +
	"\x16cell_block_codec_class\x18\x03 \x01(\tR\x13cellBlockCodecClass\x12=\n" +
	"\x1bcell_block_compressor_class\x18\x04 \x01(\tR\x18cellBlockCompressorClass\x122\n" +
	"\fversion_info\x18\x05 \x01(\v2\x0f.pb.VersionInfoR\vversionInfo\"'\n" +
	"\rCellBlockMeta\x12\x16\n" +
	"\x06length\x18\x01 \x01(\rR\x06length\"\xb8\x01\n" +
	"\x11ExceptionResponse\x120\n" +
	"\x14exception_class_name\x18\x01 \x01(\tR\x12exceptionClassName\x12\x1f\n" +
	"\vstack_trace\x18\x02 \x01(\tR\n" +
	"stackTrace\x12\x1a\n" +
	"\bhostname\x18\x03 \x01(\tR\bhostname\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\x12 \n" +
	"\fdo_not_retry\x18\x05 \x01(\bR\n" +
	"doNotRetry\"\x8c\x02\n" +
	"\rRequestHeader\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\rR\x06callId\x12+\n" +
	"\n" +
	"trace_info\x18\x02 \x01(\v2\f.pb.RPCTInfoR\ttraceInfo\x12\x1f\n" +
	"\vmethod_name\x18\x03 \x01(\tR\n" +
	"methodName\x12#\n" +
	"\rrequest_param\x18\x04 \x01(\bR\frequestParam\x129\n" +
	"\x0fcell_block_meta\x18\x05 \x01(\v2\x11.pb.CellBlockMetaR\rcellBlockMeta\x12\x1a\n" +
	"\bpriority\x18\x06 \x01(\rR\bpriority\x12\x18\n" +
	"\atimeout\x18\a \x01(\rR\atimeout\"\x99\x01\n" +
	"\x0eResponseHeader\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\rR\x06callId\x123\n" +
	"\texception\x18\x02 \x01(\v2\x15.pb.ExceptionResponseR\texception\x129\n" +
	"\x0fcell_block_meta\x18\x03 \x01(\v2\x11.pb.CellBlockMetaR\rcellBlockMetaBC\n" +
	"*org.apache.hadoop.hbase.protobuf.generatedB\tRPCProtosH\x01Z\x05../pb\xa0\x01\x01"

var (
	file_RPC_proto_rawDescOnce sync.Once
	file_RPC_proto_rawDescData []byte
)

func file_RPC_proto_rawDescGZIP() []byte {
	file_RPC_proto_rawDescOnce.Do(func() {
		file_RPC_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_RPC_proto_rawDesc), len(file_RPC_proto_rawDesc)))
	})
	return file_RPC_proto_rawDescData
}

var file_RPC_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_RPC_proto_goTypes = []any{
	(*UserInformation)(nil),   // 0: pb.UserInformation
	(*ConnectionHeader)(nil),  // 1: pb.ConnectionHeader
	(*CellBlockMeta)(nil),     // 2: pb.CellBlockMeta
	(*ExceptionResponse)(nil), // 3: pb.ExceptionResponse
	(*RequestHeader)(nil),     // 4: pb.RequestHeader
	(*ResponseHeader)(nil),    // 5: pb.ResponseHeader
	(*VersionInfo)(nil),       // 6: pb.VersionInfo
	(*RPCTInfo)(nil),          // 7: pb.RPCTInfo
}
var file_RPC_proto_depIdxs = []int32{
	0, // 0: pb.ConnectionHeader.user_info:type_name -> pb.UserInformation
	6, // 1: pb.ConnectionHeader.version_info:type_name -> pb.VersionInfo
	7, // 2: pb.RequestHeader.trace_info:type_name -> pb.RPCTInfo
	2, // 3: pb.RequestHeader.cell_block_meta:type_name -> pb.CellBlockMeta
	3, // 4: pb.ResponseHeader.exception:type_name -> pb.ExceptionResponse
	2, // 5: pb.ResponseHeader.cell_block_meta:type_name -> pb.CellBlockMeta
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_RPC_proto_init() }
func file_RPC_proto_init() {
	if File_RPC_proto != nil {
		return
	}
	file_Tracing_proto_init()
	file_HBase_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_RPC_proto_rawDesc), len(file_RPC_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RPC_proto_goTypes,
		DependencyIndexes: file_RPC_proto_depIdxs,
		MessageInfos:      file_RPC_proto_msgTypes,
	}.Build()
	File_RPC_proto = out.File
	file_RPC_proto_goTypes = nil
	file_RPC_proto_depIdxs = nil
}
