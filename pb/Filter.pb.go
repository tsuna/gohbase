//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains protocol buffers that are used for filters

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: Filter.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterList_Operator int32

const (
	FilterList_MUST_PASS_ALL FilterList_Operator = 1
	FilterList_MUST_PASS_ONE FilterList_Operator = 2
)

// Enum value maps for FilterList_Operator.
var (
	FilterList_Operator_name = map[int32]string{
		1: "MUST_PASS_ALL",
		2: "MUST_PASS_ONE",
	}
	FilterList_Operator_value = map[string]int32{
		"MUST_PASS_ALL": 1,
		"MUST_PASS_ONE": 2,
	}
)

func (x FilterList_Operator) Enum() *FilterList_Operator {
	p := new(FilterList_Operator)
	*p = x
	return p
}

func (x FilterList_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterList_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_Filter_proto_enumTypes[0].Descriptor()
}

func (FilterList_Operator) Type() protoreflect.EnumType {
	return &file_Filter_proto_enumTypes[0]
}

func (x FilterList_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FilterList_Operator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FilterList_Operator(num)
	return nil
}

// Deprecated: Use FilterList_Operator.Descriptor instead.
func (FilterList_Operator) EnumDescriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{8, 0}
}

type Filter struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	SerializedFilter []byte                 `protobuf:"bytes,2,opt,name=serialized_filter,json=serializedFilter" json:"serialized_filter,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_Filter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Filter) GetSerializedFilter() []byte {
	if x != nil {
		return x.SerializedFilter
	}
	return nil
}

type ColumnCountGetFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *int32                 `protobuf:"varint,1,req,name=limit" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnCountGetFilter) Reset() {
	*x = ColumnCountGetFilter{}
	mi := &file_Filter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnCountGetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnCountGetFilter) ProtoMessage() {}

func (x *ColumnCountGetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnCountGetFilter.ProtoReflect.Descriptor instead.
func (*ColumnCountGetFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnCountGetFilter) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ColumnPaginationFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *int32                 `protobuf:"varint,1,req,name=limit" json:"limit,omitempty"`
	Offset        *int32                 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	ColumnOffset  []byte                 `protobuf:"bytes,3,opt,name=column_offset,json=columnOffset" json:"column_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnPaginationFilter) Reset() {
	*x = ColumnPaginationFilter{}
	mi := &file_Filter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnPaginationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnPaginationFilter) ProtoMessage() {}

func (x *ColumnPaginationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnPaginationFilter.ProtoReflect.Descriptor instead.
func (*ColumnPaginationFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{2}
}

func (x *ColumnPaginationFilter) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ColumnPaginationFilter) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ColumnPaginationFilter) GetColumnOffset() []byte {
	if x != nil {
		return x.ColumnOffset
	}
	return nil
}

type ColumnPrefixFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        []byte                 `protobuf:"bytes,1,req,name=prefix" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnPrefixFilter) Reset() {
	*x = ColumnPrefixFilter{}
	mi := &file_Filter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnPrefixFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnPrefixFilter) ProtoMessage() {}

func (x *ColumnPrefixFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnPrefixFilter.ProtoReflect.Descriptor instead.
func (*ColumnPrefixFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnPrefixFilter) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type ColumnRangeFilter struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MinColumn          []byte                 `protobuf:"bytes,1,opt,name=min_column,json=minColumn" json:"min_column,omitempty"`
	MinColumnInclusive *bool                  `protobuf:"varint,2,opt,name=min_column_inclusive,json=minColumnInclusive" json:"min_column_inclusive,omitempty"`
	MaxColumn          []byte                 `protobuf:"bytes,3,opt,name=max_column,json=maxColumn" json:"max_column,omitempty"`
	MaxColumnInclusive *bool                  `protobuf:"varint,4,opt,name=max_column_inclusive,json=maxColumnInclusive" json:"max_column_inclusive,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ColumnRangeFilter) Reset() {
	*x = ColumnRangeFilter{}
	mi := &file_Filter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRangeFilter) ProtoMessage() {}

func (x *ColumnRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRangeFilter.ProtoReflect.Descriptor instead.
func (*ColumnRangeFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnRangeFilter) GetMinColumn() []byte {
	if x != nil {
		return x.MinColumn
	}
	return nil
}

func (x *ColumnRangeFilter) GetMinColumnInclusive() bool {
	if x != nil && x.MinColumnInclusive != nil {
		return *x.MinColumnInclusive
	}
	return false
}

func (x *ColumnRangeFilter) GetMaxColumn() []byte {
	if x != nil {
		return x.MaxColumn
	}
	return nil
}

func (x *ColumnRangeFilter) GetMaxColumnInclusive() bool {
	if x != nil && x.MaxColumnInclusive != nil {
		return *x.MaxColumnInclusive
	}
	return false
}

type CompareFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareOp     *CompareType           `protobuf:"varint,1,req,name=compare_op,json=compareOp,enum=pb.CompareType" json:"compare_op,omitempty"`
	Comparator    *Comparator            `protobuf:"bytes,2,opt,name=comparator" json:"comparator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompareFilter) Reset() {
	*x = CompareFilter{}
	mi := &file_Filter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareFilter) ProtoMessage() {}

func (x *CompareFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareFilter.ProtoReflect.Descriptor instead.
func (*CompareFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{5}
}

func (x *CompareFilter) GetCompareOp() CompareType {
	if x != nil && x.CompareOp != nil {
		return *x.CompareOp
	}
	return CompareType_LESS
}

func (x *CompareFilter) GetComparator() *Comparator {
	if x != nil {
		return x.Comparator
	}
	return nil
}

type DependentColumnFilter struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CompareFilter       *CompareFilter         `protobuf:"bytes,1,req,name=compare_filter,json=compareFilter" json:"compare_filter,omitempty"`
	ColumnFamily        []byte                 `protobuf:"bytes,2,opt,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	ColumnQualifier     []byte                 `protobuf:"bytes,3,opt,name=column_qualifier,json=columnQualifier" json:"column_qualifier,omitempty"`
	DropDependentColumn *bool                  `protobuf:"varint,4,opt,name=drop_dependent_column,json=dropDependentColumn" json:"drop_dependent_column,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DependentColumnFilter) Reset() {
	*x = DependentColumnFilter{}
	mi := &file_Filter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DependentColumnFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependentColumnFilter) ProtoMessage() {}

func (x *DependentColumnFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependentColumnFilter.ProtoReflect.Descriptor instead.
func (*DependentColumnFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{6}
}

func (x *DependentColumnFilter) GetCompareFilter() *CompareFilter {
	if x != nil {
		return x.CompareFilter
	}
	return nil
}

func (x *DependentColumnFilter) GetColumnFamily() []byte {
	if x != nil {
		return x.ColumnFamily
	}
	return nil
}

func (x *DependentColumnFilter) GetColumnQualifier() []byte {
	if x != nil {
		return x.ColumnQualifier
	}
	return nil
}

func (x *DependentColumnFilter) GetDropDependentColumn() bool {
	if x != nil && x.DropDependentColumn != nil {
		return *x.DropDependentColumn
	}
	return false
}

type FamilyFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareFilter *CompareFilter         `protobuf:"bytes,1,req,name=compare_filter,json=compareFilter" json:"compare_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FamilyFilter) Reset() {
	*x = FamilyFilter{}
	mi := &file_Filter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FamilyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyFilter) ProtoMessage() {}

func (x *FamilyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyFilter.ProtoReflect.Descriptor instead.
func (*FamilyFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{7}
}

func (x *FamilyFilter) GetCompareFilter() *CompareFilter {
	if x != nil {
		return x.CompareFilter
	}
	return nil
}

type FilterList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operator      *FilterList_Operator   `protobuf:"varint,1,req,name=operator,enum=pb.FilterList_Operator" json:"operator,omitempty"`
	Filters       []*Filter              `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterList) Reset() {
	*x = FilterList{}
	mi := &file_Filter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterList) ProtoMessage() {}

func (x *FilterList) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterList.ProtoReflect.Descriptor instead.
func (*FilterList) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{8}
}

func (x *FilterList) GetOperator() FilterList_Operator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return FilterList_MUST_PASS_ALL
}

func (x *FilterList) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type FilterWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *Filter                `protobuf:"bytes,1,req,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterWrapper) Reset() {
	*x = FilterWrapper{}
	mi := &file_Filter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterWrapper) ProtoMessage() {}

func (x *FilterWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterWrapper.ProtoReflect.Descriptor instead.
func (*FilterWrapper) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{9}
}

func (x *FilterWrapper) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type FirstKeyOnlyFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirstKeyOnlyFilter) Reset() {
	*x = FirstKeyOnlyFilter{}
	mi := &file_Filter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirstKeyOnlyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstKeyOnlyFilter) ProtoMessage() {}

func (x *FirstKeyOnlyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstKeyOnlyFilter.ProtoReflect.Descriptor instead.
func (*FirstKeyOnlyFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{10}
}

type FirstKeyValueMatchingQualifiersFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Qualifiers    [][]byte               `protobuf:"bytes,1,rep,name=qualifiers" json:"qualifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirstKeyValueMatchingQualifiersFilter) Reset() {
	*x = FirstKeyValueMatchingQualifiersFilter{}
	mi := &file_Filter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirstKeyValueMatchingQualifiersFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstKeyValueMatchingQualifiersFilter) ProtoMessage() {}

func (x *FirstKeyValueMatchingQualifiersFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstKeyValueMatchingQualifiersFilter.ProtoReflect.Descriptor instead.
func (*FirstKeyValueMatchingQualifiersFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{11}
}

func (x *FirstKeyValueMatchingQualifiersFilter) GetQualifiers() [][]byte {
	if x != nil {
		return x.Qualifiers
	}
	return nil
}

type FuzzyRowFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FuzzyKeysData []*BytesBytesPair      `protobuf:"bytes,1,rep,name=fuzzy_keys_data,json=fuzzyKeysData" json:"fuzzy_keys_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuzzyRowFilter) Reset() {
	*x = FuzzyRowFilter{}
	mi := &file_Filter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuzzyRowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzyRowFilter) ProtoMessage() {}

func (x *FuzzyRowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzyRowFilter.ProtoReflect.Descriptor instead.
func (*FuzzyRowFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{12}
}

func (x *FuzzyRowFilter) GetFuzzyKeysData() []*BytesBytesPair {
	if x != nil {
		return x.FuzzyKeysData
	}
	return nil
}

type InclusiveStopFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StopRowKey    []byte                 `protobuf:"bytes,1,opt,name=stop_row_key,json=stopRowKey" json:"stop_row_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InclusiveStopFilter) Reset() {
	*x = InclusiveStopFilter{}
	mi := &file_Filter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InclusiveStopFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InclusiveStopFilter) ProtoMessage() {}

func (x *InclusiveStopFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InclusiveStopFilter.ProtoReflect.Descriptor instead.
func (*InclusiveStopFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{13}
}

func (x *InclusiveStopFilter) GetStopRowKey() []byte {
	if x != nil {
		return x.StopRowKey
	}
	return nil
}

type KeyOnlyFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LenAsVal      *bool                  `protobuf:"varint,1,req,name=len_as_val,json=lenAsVal" json:"len_as_val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyOnlyFilter) Reset() {
	*x = KeyOnlyFilter{}
	mi := &file_Filter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyOnlyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyOnlyFilter) ProtoMessage() {}

func (x *KeyOnlyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyOnlyFilter.ProtoReflect.Descriptor instead.
func (*KeyOnlyFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{14}
}

func (x *KeyOnlyFilter) GetLenAsVal() bool {
	if x != nil && x.LenAsVal != nil {
		return *x.LenAsVal
	}
	return false
}

type MultipleColumnPrefixFilter struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SortedPrefixes [][]byte               `protobuf:"bytes,1,rep,name=sorted_prefixes,json=sortedPrefixes" json:"sorted_prefixes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MultipleColumnPrefixFilter) Reset() {
	*x = MultipleColumnPrefixFilter{}
	mi := &file_Filter_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleColumnPrefixFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleColumnPrefixFilter) ProtoMessage() {}

func (x *MultipleColumnPrefixFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleColumnPrefixFilter.ProtoReflect.Descriptor instead.
func (*MultipleColumnPrefixFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{15}
}

func (x *MultipleColumnPrefixFilter) GetSortedPrefixes() [][]byte {
	if x != nil {
		return x.SortedPrefixes
	}
	return nil
}

type PageFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      *int64                 `protobuf:"varint,1,req,name=page_size,json=pageSize" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageFilter) Reset() {
	*x = PageFilter{}
	mi := &file_Filter_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageFilter) ProtoMessage() {}

func (x *PageFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageFilter.ProtoReflect.Descriptor instead.
func (*PageFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{16}
}

func (x *PageFilter) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type PrefixFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        []byte                 `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrefixFilter) Reset() {
	*x = PrefixFilter{}
	mi := &file_Filter_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixFilter) ProtoMessage() {}

func (x *PrefixFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixFilter.ProtoReflect.Descriptor instead.
func (*PrefixFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{17}
}

func (x *PrefixFilter) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type QualifierFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareFilter *CompareFilter         `protobuf:"bytes,1,req,name=compare_filter,json=compareFilter" json:"compare_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QualifierFilter) Reset() {
	*x = QualifierFilter{}
	mi := &file_Filter_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QualifierFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifierFilter) ProtoMessage() {}

func (x *QualifierFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifierFilter.ProtoReflect.Descriptor instead.
func (*QualifierFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{18}
}

func (x *QualifierFilter) GetCompareFilter() *CompareFilter {
	if x != nil {
		return x.CompareFilter
	}
	return nil
}

type RandomRowFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chance        *float32               `protobuf:"fixed32,1,req,name=chance" json:"chance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandomRowFilter) Reset() {
	*x = RandomRowFilter{}
	mi := &file_Filter_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomRowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomRowFilter) ProtoMessage() {}

func (x *RandomRowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomRowFilter.ProtoReflect.Descriptor instead.
func (*RandomRowFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{19}
}

func (x *RandomRowFilter) GetChance() float32 {
	if x != nil && x.Chance != nil {
		return *x.Chance
	}
	return 0
}

type RowFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareFilter *CompareFilter         `protobuf:"bytes,1,req,name=compare_filter,json=compareFilter" json:"compare_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowFilter) Reset() {
	*x = RowFilter{}
	mi := &file_Filter_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowFilter) ProtoMessage() {}

func (x *RowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowFilter.ProtoReflect.Descriptor instead.
func (*RowFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{20}
}

func (x *RowFilter) GetCompareFilter() *CompareFilter {
	if x != nil {
		return x.CompareFilter
	}
	return nil
}

type SingleColumnValueExcludeFilter struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	SingleColumnValueFilter *SingleColumnValueFilter `protobuf:"bytes,1,req,name=single_column_value_filter,json=singleColumnValueFilter" json:"single_column_value_filter,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SingleColumnValueExcludeFilter) Reset() {
	*x = SingleColumnValueExcludeFilter{}
	mi := &file_Filter_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleColumnValueExcludeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleColumnValueExcludeFilter) ProtoMessage() {}

func (x *SingleColumnValueExcludeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleColumnValueExcludeFilter.ProtoReflect.Descriptor instead.
func (*SingleColumnValueExcludeFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{21}
}

func (x *SingleColumnValueExcludeFilter) GetSingleColumnValueFilter() *SingleColumnValueFilter {
	if x != nil {
		return x.SingleColumnValueFilter
	}
	return nil
}

type SingleColumnValueFilter struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ColumnFamily      []byte                 `protobuf:"bytes,1,opt,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	ColumnQualifier   []byte                 `protobuf:"bytes,2,opt,name=column_qualifier,json=columnQualifier" json:"column_qualifier,omitempty"`
	CompareOp         *CompareType           `protobuf:"varint,3,req,name=compare_op,json=compareOp,enum=pb.CompareType" json:"compare_op,omitempty"`
	Comparator        *Comparator            `protobuf:"bytes,4,req,name=comparator" json:"comparator,omitempty"`
	FilterIfMissing   *bool                  `protobuf:"varint,5,opt,name=filter_if_missing,json=filterIfMissing" json:"filter_if_missing,omitempty"`
	LatestVersionOnly *bool                  `protobuf:"varint,6,opt,name=latest_version_only,json=latestVersionOnly" json:"latest_version_only,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SingleColumnValueFilter) Reset() {
	*x = SingleColumnValueFilter{}
	mi := &file_Filter_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleColumnValueFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleColumnValueFilter) ProtoMessage() {}

func (x *SingleColumnValueFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleColumnValueFilter.ProtoReflect.Descriptor instead.
func (*SingleColumnValueFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{22}
}

func (x *SingleColumnValueFilter) GetColumnFamily() []byte {
	if x != nil {
		return x.ColumnFamily
	}
	return nil
}

func (x *SingleColumnValueFilter) GetColumnQualifier() []byte {
	if x != nil {
		return x.ColumnQualifier
	}
	return nil
}

func (x *SingleColumnValueFilter) GetCompareOp() CompareType {
	if x != nil && x.CompareOp != nil {
		return *x.CompareOp
	}
	return CompareType_LESS
}

func (x *SingleColumnValueFilter) GetComparator() *Comparator {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *SingleColumnValueFilter) GetFilterIfMissing() bool {
	if x != nil && x.FilterIfMissing != nil {
		return *x.FilterIfMissing
	}
	return false
}

func (x *SingleColumnValueFilter) GetLatestVersionOnly() bool {
	if x != nil && x.LatestVersionOnly != nil {
		return *x.LatestVersionOnly
	}
	return false
}

type SkipFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *Filter                `protobuf:"bytes,1,req,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SkipFilter) Reset() {
	*x = SkipFilter{}
	mi := &file_Filter_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkipFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipFilter) ProtoMessage() {}

func (x *SkipFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipFilter.ProtoReflect.Descriptor instead.
func (*SkipFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{23}
}

func (x *SkipFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type TimestampsFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamps    []int64                `protobuf:"varint,1,rep,packed,name=timestamps" json:"timestamps,omitempty"`
	CanHint       *bool                  `protobuf:"varint,2,opt,name=can_hint,json=canHint" json:"can_hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimestampsFilter) Reset() {
	*x = TimestampsFilter{}
	mi := &file_Filter_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampsFilter) ProtoMessage() {}

func (x *TimestampsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampsFilter.ProtoReflect.Descriptor instead.
func (*TimestampsFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{24}
}

func (x *TimestampsFilter) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *TimestampsFilter) GetCanHint() bool {
	if x != nil && x.CanHint != nil {
		return *x.CanHint
	}
	return false
}

type ValueFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareFilter *CompareFilter         `protobuf:"bytes,1,req,name=compare_filter,json=compareFilter" json:"compare_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueFilter) Reset() {
	*x = ValueFilter{}
	mi := &file_Filter_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueFilter) ProtoMessage() {}

func (x *ValueFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueFilter.ProtoReflect.Descriptor instead.
func (*ValueFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{25}
}

func (x *ValueFilter) GetCompareFilter() *CompareFilter {
	if x != nil {
		return x.CompareFilter
	}
	return nil
}

type WhileMatchFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *Filter                `protobuf:"bytes,1,req,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhileMatchFilter) Reset() {
	*x = WhileMatchFilter{}
	mi := &file_Filter_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhileMatchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhileMatchFilter) ProtoMessage() {}

func (x *WhileMatchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhileMatchFilter.ProtoReflect.Descriptor instead.
func (*WhileMatchFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{26}
}

func (x *WhileMatchFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type FilterAllFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterAllFilter) Reset() {
	*x = FilterAllFilter{}
	mi := &file_Filter_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterAllFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAllFilter) ProtoMessage() {}

func (x *FilterAllFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAllFilter.ProtoReflect.Descriptor instead.
func (*FilterAllFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{27}
}

type RowRange struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StartRow          []byte                 `protobuf:"bytes,1,opt,name=start_row,json=startRow" json:"start_row,omitempty"`
	StartRowInclusive *bool                  `protobuf:"varint,2,opt,name=start_row_inclusive,json=startRowInclusive" json:"start_row_inclusive,omitempty"`
	StopRow           []byte                 `protobuf:"bytes,3,opt,name=stop_row,json=stopRow" json:"stop_row,omitempty"`
	StopRowInclusive  *bool                  `protobuf:"varint,4,opt,name=stop_row_inclusive,json=stopRowInclusive" json:"stop_row_inclusive,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RowRange) Reset() {
	*x = RowRange{}
	mi := &file_Filter_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowRange) ProtoMessage() {}

func (x *RowRange) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowRange.ProtoReflect.Descriptor instead.
func (*RowRange) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{28}
}

func (x *RowRange) GetStartRow() []byte {
	if x != nil {
		return x.StartRow
	}
	return nil
}

func (x *RowRange) GetStartRowInclusive() bool {
	if x != nil && x.StartRowInclusive != nil {
		return *x.StartRowInclusive
	}
	return false
}

func (x *RowRange) GetStopRow() []byte {
	if x != nil {
		return x.StopRow
	}
	return nil
}

func (x *RowRange) GetStopRowInclusive() bool {
	if x != nil && x.StopRowInclusive != nil {
		return *x.StopRowInclusive
	}
	return false
}

type MultiRowRangeFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RowRangeList  []*RowRange            `protobuf:"bytes,1,rep,name=row_range_list,json=rowRangeList" json:"row_range_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiRowRangeFilter) Reset() {
	*x = MultiRowRangeFilter{}
	mi := &file_Filter_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiRowRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRowRangeFilter) ProtoMessage() {}

func (x *MultiRowRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Filter_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRowRangeFilter.ProtoReflect.Descriptor instead.
func (*MultiRowRangeFilter) Descriptor() ([]byte, []int) {
	return file_Filter_proto_rawDescGZIP(), []int{29}
}

func (x *MultiRowRangeFilter) GetRowRangeList() []*RowRange {
	if x != nil {
		return x.RowRangeList
	}
	return nil
}

var File_Filter_proto protoreflect.FileDescriptor

const file_Filter_proto_rawDesc = "" +
	"\n" +
	"\fFilter.proto\x12\x02pb\x1a\vHBase.proto\x1a\x10Comparator.proto\"I\n" +
	"\x06Filter\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12+\n" +
	"\x11serialized_filter\x18\x02 \x01(\fR\x10serializedFilter\",\n" +
	"\x14ColumnCountGetFilter\x12\x14\n" +
	"\x05limit\x18\x01 \x02(\x05R\x05limit\"k\n" +
	"\x16ColumnPaginationFilter\x12\x14\n" +
	"\x05limit\x18\x01 \x02(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12#\n" +
	"\rcolumn_offset\x18\x03 \x01(\fR\fcolumnOffset\",\n" +
	"\x12ColumnPrefixFilter\x12\x16\n" +
	"\x06prefix\x18\x01 \x02(\fR\x06prefix\"\xb5\x01\n" +
	"\x11ColumnRangeFilter\x12\x1d\n" +
	"\n" +
	"min_column\x18\x01 \x01(\fR\tminColumn\x120\n" +
	"\x14min_column_inclusive\x18\x02 \x01(\bR\x12minColumnInclusive\x12\x1d\n" +
	"\n" +
	"max_column\x18\x03 \x01(\fR\tmaxColumn\x120\n" +
	"\x14max_column_inclusive\x18\x04 \x01(\bR\x12maxColumnInclusive\"o\n" +
	"\rCompareFilter\x12.\n" +
	"\n" +
	"compare_op\x18\x01 \x02(\x0e2\x0f.pb.CompareTypeR\tcompareOp\x12.\n" +
	"\n" +
	"comparator\x18\x02 \x01(\v2\x0e.pb.ComparatorR\n" +
	"comparator\"\xd5\x01\n" +
	"\x15DependentColumnFilter\x128\n" +
	"\x0ecompare_filter\x18\x01 \x02(\v2\x11.pb.CompareFilterR\rcompareFilter\x12#\n" +
	"\rcolumn_family\x18\x02 \x01(\fR\fcolumnFamily\x12)\n" +
	"\x10column_qualifier\x18\x03 \x01(\fR\x0fcolumnQualifier\x122\n" +
	"\x15drop_dependent_column\x18\x04 \x01(\bR\x13dropDependentColumn\"H\n" +
	"\fFamilyFilter\x128\n" +
	"\x0ecompare_filter\x18\x01 \x02(\v2\x11.pb.CompareFilterR\rcompareFilter\"\x99\x01\n" +
	"\n" +
	"FilterList\x123\n" +
	"\boperator\x18\x01 \x02(\x0e2\x17.pb.FilterList.OperatorR\boperator\x12$\n" +
	"\afilters\x18\x02 \x03(\v2\n" +
	".pb.FilterR\afilters\"0\n" +
	"\bOperator\x12\x11\n" +
	"\rMUST_PASS_ALL\x10\x01\x12\x11\n" +
	"\rMUST_PASS_ONE\x10\x02\"3\n" +
	"\rFilterWrapper\x12\"\n" +
	"\x06filter\x18\x01 \x02(\v2\n" +
	".pb.FilterR\x06filter\"\x14\n" +
	"\x12FirstKeyOnlyFilter\"G\n" +
	"%FirstKeyValueMatchingQualifiersFilter\x12\x1e\n" +
	"\n" +
	"qualifiers\x18\x01 \x03(\fR\n" +
	"qualifiers\"L\n" +
	"\x0eFuzzyRowFilter\x12:\n" +
	"\x0ffuzzy_keys_data\x18\x01 \x03(\v2\x12.pb.BytesBytesPairR\rfuzzyKeysData\"7\n" +
	"\x13InclusiveStopFilter\x12 \n" +
	"\fstop_row_key\x18\x01 \x01(\fR\n" +
	"stopRowKey\"-\n" +
	"\rKeyOnlyFilter\x12\x1c\n" +
	"\n" +
	"len_as_val\x18\x01 \x02(\bR\blenAsVal\"E\n" +
	"\x1aMultipleColumnPrefixFilter\x12'\n" +
	"\x0fsorted_prefixes\x18\x01 \x03(\fR\x0esortedPrefixes\")\n" +
	"\n" +
	"PageFilter\x12\x1b\n" +
	"\tpage_size\x18\x01 \x02(\x03R\bpageSize\"&\n" +
	"\fPrefixFilter\x12\x16\n" +
	"\x06prefix\x18\x01 \x01(\fR\x06prefix\"K\n" +
	"\x0fQualifierFilter\x128\n" +
	"\x0ecompare_filter\x18\x01 \x02(\v2\x11.pb.CompareFilterR\rcompareFilter\")\n" +
	"\x0fRandomRowFilter\x12\x16\n" +
	"\x06chance\x18\x01 \x02(\x02R\x06chance\"E\n" +
	"\tRowFilter\x128\n" +
	"\x0ecompare_filter\x18\x01 \x02(\v2\x11.pb.CompareFilterR\rcompareFilter\"z\n" +
	"\x1eSingleColumnValueExcludeFilter\x12X\n" +
	"\x1asingle_column_value_filter\x18\x01 \x02(\v2\x1b.pb.SingleColumnValueFilterR\x17singleColumnValueFilter\"\xa5\x02\n" +
	"\x17SingleColumnValueFilter\x12#\n" +
	"\rcolumn_family\x18\x01 \x01(\fR\fcolumnFamily\x12)\n" +
	"\x10column_qualifier\x18\x02 \x01(\fR\x0fcolumnQualifier\x12.\n" +
	"\n" +
	"compare_op\x18\x03 \x02(\x0e2\x0f.pb.CompareTypeR\tcompareOp\x12.\n" +
	"\n" +
	"comparator\x18\x04 \x02(\v2\x0e.pb.ComparatorR\n" +
	"comparator\x12*\n" +
	"\x11filter_if_missing\x18\x05 \x01(\bR\x0ffilterIfMissing\x12.\n" +
	"\x13latest_version_only\x18\x06 \x01(\bR\x11latestVersionOnly\"0\n" +
	"\n" +
	"SkipFilter\x12\"\n" +
	"\x06filter\x18\x01 \x02(\v2\n" +
	".pb.FilterR\x06filter\"Q\n" +
	"\x10TimestampsFilter\x12\"\n" +
	"\n" +
	"timestamps\x18\x01 \x03(\x03B\x02\x10\x01R\n" +
	"timestamps\x12\x19\n" +
	"\bcan_hint\x18\x02 \x01(\bR\acanHint\"G\n" +
	"\vValueFilter\x128\n" +
	"\x0ecompare_filter\x18\x01 \x02(\v2\x11.pb.CompareFilterR\rcompareFilter\"6\n" +
	"\x10WhileMatchFilter\x12\"\n" +
	"\x06filter\x18\x01 \x02(\v2\n" +
	".pb.FilterR\x06filter\"\x11\n" +
	"\x0fFilterAllFilter\"\xa0\x01\n" +
	"\bRowRange\x12\x1b\n" +
	"\tstart_row\x18\x01 \x01(\fR\bstartRow\x12.\n" +
	"\x13start_row_inclusive\x18\x02 \x01(\bR\x11startRowInclusive\x12\x19\n" +
	"\bstop_row\x18\x03 \x01(\fR\astopRow\x12,\n" +
	"\x12stop_row_inclusive\x18\x04 \x01(\bR\x10stopRowInclusive\"I\n" +
	"\x13MultiRowRangeFilter\x122\n" +
	"\x0erow_range_list\x18\x01 \x03(\v2\f.pb.RowRangeR\frowRangeListBI\n" +
	"*org.apache.hadoop.hbase.protobuf.generatedB\fFilterProtosH\x01Z\x05../pb\x88\x01\x01\xa0\x01\x01"

var (
	file_Filter_proto_rawDescOnce sync.Once
	file_Filter_proto_rawDescData []byte
)

func file_Filter_proto_rawDescGZIP() []byte {
	file_Filter_proto_rawDescOnce.Do(func() {
		file_Filter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Filter_proto_rawDesc), len(file_Filter_proto_rawDesc)))
	})
	return file_Filter_proto_rawDescData
}

var file_Filter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Filter_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_Filter_proto_goTypes = []any{
	(FilterList_Operator)(0),                      // 0: pb.FilterList.Operator
	(*Filter)(nil),                                // 1: pb.Filter
	(*ColumnCountGetFilter)(nil),                  // 2: pb.ColumnCountGetFilter
	(*ColumnPaginationFilter)(nil),                // 3: pb.ColumnPaginationFilter
	(*ColumnPrefixFilter)(nil),                    // 4: pb.ColumnPrefixFilter
	(*ColumnRangeFilter)(nil),                     // 5: pb.ColumnRangeFilter
	(*CompareFilter)(nil),                         // 6: pb.CompareFilter
	(*DependentColumnFilter)(nil),                 // 7: pb.DependentColumnFilter
	(*FamilyFilter)(nil),                          // 8: pb.FamilyFilter
	(*FilterList)(nil),                            // 9: pb.FilterList
	(*FilterWrapper)(nil),                         // 10: pb.FilterWrapper
	(*FirstKeyOnlyFilter)(nil),                    // 11: pb.FirstKeyOnlyFilter
	(*FirstKeyValueMatchingQualifiersFilter)(nil), // 12: pb.FirstKeyValueMatchingQualifiersFilter
	(*FuzzyRowFilter)(nil),                        // 13: pb.FuzzyRowFilter
	(*InclusiveStopFilter)(nil),                   // 14: pb.InclusiveStopFilter
	(*KeyOnlyFilter)(nil),                         // 15: pb.KeyOnlyFilter
	(*MultipleColumnPrefixFilter)(nil),            // 16: pb.MultipleColumnPrefixFilter
	(*PageFilter)(nil),                            // 17: pb.PageFilter
	(*PrefixFilter)(nil),                          // 18: pb.PrefixFilter
	(*QualifierFilter)(nil),                       // 19: pb.QualifierFilter
	(*RandomRowFilter)(nil),                       // 20: pb.RandomRowFilter
	(*RowFilter)(nil),                             // 21: pb.RowFilter
	(*SingleColumnValueExcludeFilter)(nil),        // 22: pb.SingleColumnValueExcludeFilter
	(*SingleColumnValueFilter)(nil),               // 23: pb.SingleColumnValueFilter
	(*SkipFilter)(nil),                            // 24: pb.SkipFilter
	(*TimestampsFilter)(nil),                      // 25: pb.TimestampsFilter
	(*ValueFilter)(nil),                           // 26: pb.ValueFilter
	(*WhileMatchFilter)(nil),                      // 27: pb.WhileMatchFilter
	(*FilterAllFilter)(nil),                       // 28: pb.FilterAllFilter
	(*RowRange)(nil),                              // 29: pb.RowRange
	(*MultiRowRangeFilter)(nil),                   // 30: pb.MultiRowRangeFilter
	(CompareType)(0),                              // 31: pb.CompareType
	(*Comparator)(nil),                            // 32: pb.Comparator
	(*BytesBytesPair)(nil),                        // 33: pb.BytesBytesPair
}
var file_Filter_proto_depIdxs = []int32{
	31, // 0: pb.CompareFilter.compare_op:type_name -> pb.CompareType
	32, // 1: pb.CompareFilter.comparator:type_name -> pb.Comparator
	6,  // 2: pb.DependentColumnFilter.compare_filter:type_name -> pb.CompareFilter
	6,  // 3: pb.FamilyFilter.compare_filter:type_name -> pb.CompareFilter
	0,  // 4: pb.FilterList.operator:type_name -> pb.FilterList.Operator
	1,  // 5: pb.FilterList.filters:type_name -> pb.Filter
	1,  // 6: pb.FilterWrapper.filter:type_name -> pb.Filter
	33, // 7: pb.FuzzyRowFilter.fuzzy_keys_data:type_name -> pb.BytesBytesPair
	6,  // 8: pb.QualifierFilter.compare_filter:type_name -> pb.CompareFilter
	6,  // 9: pb.RowFilter.compare_filter:type_name -> pb.CompareFilter
	23, // 10: pb.SingleColumnValueExcludeFilter.single_column_value_filter:type_name -> pb.SingleColumnValueFilter
	31, // 11: pb.SingleColumnValueFilter.compare_op:type_name -> pb.CompareType
	32, // 12: pb.SingleColumnValueFilter.comparator:type_name -> pb.Comparator
	1,  // 13: pb.SkipFilter.filter:type_name -> pb.Filter
	6,  // 14: pb.ValueFilter.compare_filter:type_name -> pb.CompareFilter
	1,  // 15: pb.WhileMatchFilter.filter:type_name -> pb.Filter
	29, // 16: pb.MultiRowRangeFilter.row_range_list:type_name -> pb.RowRange
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_Filter_proto_init() }
func file_Filter_proto_init() {
	if File_Filter_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_Comparator_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Filter_proto_rawDesc), len(file_Filter_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Filter_proto_goTypes,
		DependencyIndexes: file_Filter_proto_depIdxs,
		EnumInfos:         file_Filter_proto_enumTypes,
		MessageInfos:      file_Filter_proto_msgTypes,
	}.Build()
	File_Filter_proto = out.File
	file_Filter_proto_goTypes = nil
	file_Filter_proto_depIdxs = nil
}
