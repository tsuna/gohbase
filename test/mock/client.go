// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tsuna/gohbase (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=client.go -package=mock github.com/tsuna/gohbase Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hrpc "github.com/tsuna/gohbase/hrpc"
	pb "github.com/tsuna/gohbase/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockClient) Append(a *hrpc.Mutate) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", a)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockClientMockRecorder) Append(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockClient)(nil).Append), a)
}

// CacheRegions mocks base method.
func (m *MockClient) CacheRegions(table []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheRegions", table)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheRegions indicates an expected call of CacheRegions.
func (mr *MockClientMockRecorder) CacheRegions(table any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheRegions", reflect.TypeOf((*MockClient)(nil).CacheRegions), table)
}

// CheckAndPut mocks base method.
func (m *MockClient) CheckAndPut(p *hrpc.Mutate, family, qualifier string, expectedValue []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndPut", p, family, qualifier, expectedValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndPut indicates an expected call of CheckAndPut.
func (mr *MockClientMockRecorder) CheckAndPut(p, family, qualifier, expectedValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndPut", reflect.TypeOf((*MockClient)(nil).CheckAndPut), p, family, qualifier, expectedValue)
}

// CheckAndPutWithCompareType mocks base method.
func (m *MockClient) CheckAndPutWithCompareType(p *hrpc.Mutate, family, qualifier string, expectedValue []byte, compareType pb.CompareType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndPutWithCompareType", p, family, qualifier, expectedValue, compareType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndPutWithCompareType indicates an expected call of CheckAndPutWithCompareType.
func (mr *MockClientMockRecorder) CheckAndPutWithCompareType(p, family, qualifier, expectedValue, compareType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndPutWithCompareType", reflect.TypeOf((*MockClient)(nil).CheckAndPutWithCompareType), p, family, qualifier, expectedValue, compareType)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Delete mocks base method.
func (m *MockClient) Delete(d *hrpc.Mutate) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", d)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), d)
}

// Get mocks base method.
func (m *MockClient) Get(g *hrpc.Get) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", g)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), g)
}

// Increment mocks base method.
func (m *MockClient) Increment(i *hrpc.Mutate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", i)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockClientMockRecorder) Increment(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockClient)(nil).Increment), i)
}

// Put mocks base method.
func (m *MockClient) Put(p *hrpc.Mutate) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", p)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockClientMockRecorder) Put(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), p)
}

// Scan mocks base method.
func (m *MockClient) Scan(s *hrpc.Scan) hrpc.Scanner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", s)
	ret0, _ := ret[0].(hrpc.Scanner)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockClientMockRecorder) Scan(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockClient)(nil).Scan), s)
}

// SendBatch mocks base method.
func (m *MockClient) SendBatch(ctx context.Context, batch []hrpc.Call) ([]hrpc.RPCResult, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, batch)
	ret0, _ := ret[0].([]hrpc.RPCResult)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockClientMockRecorder) SendBatch(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockClient)(nil).SendBatch), ctx, batch)
}
