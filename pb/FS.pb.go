// Code generated by protoc-gen-go. DO NOT EDIT.
// source: FS.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Reference_Range int32

const (
	Reference_TOP    Reference_Range = 0
	Reference_BOTTOM Reference_Range = 1
)

var Reference_Range_name = map[int32]string{
	0: "TOP",
	1: "BOTTOM",
}
var Reference_Range_value = map[string]int32{
	"TOP":    0,
	"BOTTOM": 1,
}

func (x Reference_Range) Enum() *Reference_Range {
	p := new(Reference_Range)
	*p = x
	return p
}
func (x Reference_Range) String() string {
	return proto.EnumName(Reference_Range_name, int32(x))
}
func (x *Reference_Range) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Reference_Range_value, data, "Reference_Range")
	if err != nil {
		return err
	}
	*x = Reference_Range(value)
	return nil
}
func (Reference_Range) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 0} }

// *
// The ${HBASE_ROOTDIR}/hbase.version file content
type HBaseVersionFileContent struct {
	Version          *string `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HBaseVersionFileContent) Reset()                    { *m = HBaseVersionFileContent{} }
func (m *HBaseVersionFileContent) String() string            { return proto.CompactTextString(m) }
func (*HBaseVersionFileContent) ProtoMessage()               {}
func (*HBaseVersionFileContent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *HBaseVersionFileContent) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

// *
// Reference file content used when we split an hfile under a region.
type Reference struct {
	Splitkey         []byte           `protobuf:"bytes,1,req,name=splitkey" json:"splitkey,omitempty"`
	Range            *Reference_Range `protobuf:"varint,2,req,name=range,enum=pb.Reference_Range" json:"range,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (m *Reference) String() string            { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Reference) GetSplitkey() []byte {
	if m != nil {
		return m.Splitkey
	}
	return nil
}

func (m *Reference) GetRange() Reference_Range {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return Reference_TOP
}

func init() {
	proto.RegisterType((*HBaseVersionFileContent)(nil), "pb.HBaseVersionFileContent")
	proto.RegisterType((*Reference)(nil), "pb.Reference")
	proto.RegisterEnum("pb.Reference_Range", Reference_Range_name, Reference_Range_value)
}

func init() { proto.RegisterFile("FS.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x46, 0xb1, 0x51, 0x69, 0x7a, 0x42, 0xa8, 0x32, 0x03, 0x11, 0x62, 0xa8, 0x32, 0x15, 0x86,
	0x1b, 0x60, 0x64, 0x33, 0x52, 0xd4, 0x05, 0xa5, 0x72, 0x23, 0x76, 0xbb, 0xbd, 0x26, 0x11, 0x91,
	0x6d, 0xd9, 0x06, 0x89, 0x7f, 0xc3, 0x4f, 0x45, 0x49, 0x44, 0xc6, 0xf7, 0xee, 0xdd, 0xf0, 0x41,
	0x56, 0x1e, 0xd0, 0x07, 0x97, 0x9c, 0xe0, 0xde, 0x14, 0x2f, 0x70, 0xb7, 0x93, 0x3a, 0xd2, 0x07,
	0x85, 0xd8, 0x39, 0x5b, 0x76, 0x3d, 0xbd, 0x39, 0x9b, 0xc8, 0x26, 0x91, 0xc3, 0xf2, 0x7b, 0xb2,
	0x39, 0xdb, 0xf0, 0xed, 0x4a, 0xfd, 0x63, 0xe1, 0x61, 0xa5, 0xe8, 0x4c, 0x81, 0xec, 0x91, 0xc4,
	0x3d, 0x64, 0xd1, 0xf7, 0x5d, 0xfa, 0xa4, 0x9f, 0xb1, 0xbb, 0x56, 0x33, 0x8b, 0x47, 0x58, 0x04,
	0x6d, 0x1b, 0xca, 0xf9, 0x86, 0x6f, 0x6f, 0x9e, 0x6f, 0xd1, 0x1b, 0x9c, 0x3f, 0x51, 0x0d, 0x27,
	0x35, 0x15, 0xc5, 0x03, 0x2c, 0x46, 0x16, 0x4b, 0xb8, 0xac, 0xab, 0xfd, 0xfa, 0x42, 0x00, 0x5c,
	0xc9, 0xaa, 0xae, 0xab, 0xf7, 0x35, 0x93, 0xaf, 0xf0, 0xe4, 0x42, 0x83, 0xda, 0xeb, 0x63, 0x4b,
	0xd8, 0xea, 0x93, 0x73, 0x1e, 0x5b, 0xa3, 0x23, 0x4d, 0x5b, 0xcc, 0xd7, 0x19, 0x1b, 0xb2, 0x14,
	0x74, 0xa2, 0x93, 0xcc, 0xca, 0xc3, 0x7e, 0xb0, 0x71, 0xc7, 0x7e, 0x19, 0xfb, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x80, 0x03, 0xac, 0x94, 0xf2, 0x00, 0x00, 0x00,
}
