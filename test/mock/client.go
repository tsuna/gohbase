// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hrpc "github.com/tsuna/gohbase/hrpc"
	pb "github.com/tsuna/gohbase/pb"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockClient) Scan(s *hrpc.Scan) hrpc.Scanner {
	ret := m.ctrl.Call(m, "Scan", s)
	ret0, _ := ret[0].(hrpc.Scanner)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockClientMockRecorder) Scan(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockClient)(nil).Scan), s)
}

// Get mocks base method
func (m *MockClient) Get(g *hrpc.Get) (*hrpc.Result, error) {
	ret := m.ctrl.Call(m, "Get", g)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientMockRecorder) Get(g interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), g)
}

// Put mocks base method
func (m *MockClient) Put(p *hrpc.Mutate) (*hrpc.Result, error) {
	ret := m.ctrl.Call(m, "Put", p)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockClientMockRecorder) Put(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), p)
}

// Delete mocks base method
func (m *MockClient) Delete(d *hrpc.Mutate) (*hrpc.Result, error) {
	ret := m.ctrl.Call(m, "Delete", d)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClientMockRecorder) Delete(d interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), d)
}

// Append mocks base method
func (m *MockClient) Append(a *hrpc.Mutate) (*hrpc.Result, error) {
	ret := m.ctrl.Call(m, "Append", a)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockClientMockRecorder) Append(a interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockClient)(nil).Append), a)
}

// Increment mocks base method
func (m *MockClient) Increment(i *hrpc.Mutate) (int64, error) {
	ret := m.ctrl.Call(m, "Increment", i)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment
func (mr *MockClientMockRecorder) Increment(i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockClient)(nil).Increment), i)
}

// CheckAndPut mocks base method
func (m *MockClient) CheckAndPut(p *hrpc.Mutate, family, qualifier string, expectedValue []byte) (bool, error) {
	ret := m.ctrl.Call(m, "CheckAndPut", p, family, qualifier, expectedValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndPut indicates an expected call of CheckAndPut
func (mr *MockClientMockRecorder) CheckAndPut(p, family, qualifier, expectedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndPut", reflect.TypeOf((*MockClient)(nil).CheckAndPut), p, family, qualifier, expectedValue)
}

// CheckAndPutExt mocks base method
func (m *MockClient) CheckAndPutExt(p *hrpc.Mutate, family, qualifier string, expectedValue []byte, compareType *pb.CompareType) (bool, error) {
	ret := m.ctrl.Call(m, "CheckAndPutExt", p, family, qualifier, expectedValue, compareType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndPutExt indicates an expected call of CheckAndPutExt
func (mr *MockClientMockRecorder) CheckAndPutExt(p, family, qualifier, expectedValue, compareType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndPutExt", reflect.TypeOf((*MockClient)(nil).CheckAndPutExt), p, family, qualifier, expectedValue, compareType)
}

// Close mocks base method
func (m *MockClient) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}
