//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains protocol buffers that are used for ClustStatus

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: ClusterStatus.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegionState_State int32

const (
	RegionState_OFFLINE       RegionState_State = 0  // region is in an offline state
	RegionState_PENDING_OPEN  RegionState_State = 1  // sent rpc to server to open but has not begun
	RegionState_OPENING       RegionState_State = 2  // server has begun to open but not yet done
	RegionState_OPEN          RegionState_State = 3  // server opened region and updated meta
	RegionState_PENDING_CLOSE RegionState_State = 4  // sent rpc to server to close but has not begun
	RegionState_CLOSING       RegionState_State = 5  // server has begun to close but not yet done
	RegionState_CLOSED        RegionState_State = 6  // server closed region and updated meta
	RegionState_SPLITTING     RegionState_State = 7  // server started split of a region
	RegionState_SPLIT         RegionState_State = 8  // server completed split of a region
	RegionState_FAILED_OPEN   RegionState_State = 9  // failed to open, and won't retry any more
	RegionState_FAILED_CLOSE  RegionState_State = 10 // failed to close, and won't retry any more
	RegionState_MERGING       RegionState_State = 11 // server started merge a region
	RegionState_MERGED        RegionState_State = 12 // server completed merge of a region
	RegionState_SPLITTING_NEW RegionState_State = 13 // new region to be created when RS splits a parent
	// region but hasn't be created yet, or master doesn't
	// know it's already created
	RegionState_MERGING_NEW RegionState_State = 14 // new region to be created when RS merges two
)

// Enum value maps for RegionState_State.
var (
	RegionState_State_name = map[int32]string{
		0:  "OFFLINE",
		1:  "PENDING_OPEN",
		2:  "OPENING",
		3:  "OPEN",
		4:  "PENDING_CLOSE",
		5:  "CLOSING",
		6:  "CLOSED",
		7:  "SPLITTING",
		8:  "SPLIT",
		9:  "FAILED_OPEN",
		10: "FAILED_CLOSE",
		11: "MERGING",
		12: "MERGED",
		13: "SPLITTING_NEW",
		14: "MERGING_NEW",
	}
	RegionState_State_value = map[string]int32{
		"OFFLINE":       0,
		"PENDING_OPEN":  1,
		"OPENING":       2,
		"OPEN":          3,
		"PENDING_CLOSE": 4,
		"CLOSING":       5,
		"CLOSED":        6,
		"SPLITTING":     7,
		"SPLIT":         8,
		"FAILED_OPEN":   9,
		"FAILED_CLOSE":  10,
		"MERGING":       11,
		"MERGED":        12,
		"SPLITTING_NEW": 13,
		"MERGING_NEW":   14,
	}
)

func (x RegionState_State) Enum() *RegionState_State {
	p := new(RegionState_State)
	*p = x
	return p
}

func (x RegionState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ClusterStatus_proto_enumTypes[0].Descriptor()
}

func (RegionState_State) Type() protoreflect.EnumType {
	return &file_ClusterStatus_proto_enumTypes[0]
}

func (x RegionState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionState_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionState_State(num)
	return nil
}

// Deprecated: Use RegionState_State.Descriptor instead.
func (RegionState_State) EnumDescriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{0, 0}
}

type RegionState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegionInfo    *RegionInfo            `protobuf:"bytes,1,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	State         *RegionState_State     `protobuf:"varint,2,req,name=state,enum=pb.RegionState_State" json:"state,omitempty"`
	Stamp         *uint64                `protobuf:"varint,3,opt,name=stamp" json:"stamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionState) Reset() {
	*x = RegionState{}
	mi := &file_ClusterStatus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionState) ProtoMessage() {}

func (x *RegionState) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionState.ProtoReflect.Descriptor instead.
func (*RegionState) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{0}
}

func (x *RegionState) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *RegionState) GetState() RegionState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RegionState_OFFLINE
}

func (x *RegionState) GetStamp() uint64 {
	if x != nil && x.Stamp != nil {
		return *x.Stamp
	}
	return 0
}

type RegionInTransition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *RegionSpecifier       `protobuf:"bytes,1,req,name=spec" json:"spec,omitempty"`
	RegionState   *RegionState           `protobuf:"bytes,2,req,name=region_state,json=regionState" json:"region_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionInTransition) Reset() {
	*x = RegionInTransition{}
	mi := &file_ClusterStatus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionInTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInTransition) ProtoMessage() {}

func (x *RegionInTransition) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInTransition.ProtoReflect.Descriptor instead.
func (*RegionInTransition) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{1}
}

func (x *RegionInTransition) GetSpec() *RegionSpecifier {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RegionInTransition) GetRegionState() *RegionState {
	if x != nil {
		return x.RegionState
	}
	return nil
}

// *
// sequence Id of a store
type StoreSequenceId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FamilyName    []byte                 `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	SequenceId    *uint64                `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreSequenceId) Reset() {
	*x = StoreSequenceId{}
	mi := &file_ClusterStatus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreSequenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSequenceId) ProtoMessage() {}

func (x *StoreSequenceId) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSequenceId.ProtoReflect.Descriptor instead.
func (*StoreSequenceId) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{2}
}

func (x *StoreSequenceId) GetFamilyName() []byte {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *StoreSequenceId) GetSequenceId() uint64 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

// *
// contains a sequence id of a region which should be the minimum of its store sequence ids and
// list of sequence ids of the region's stores
type RegionStoreSequenceIds struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LastFlushedSequenceId *uint64                `protobuf:"varint,1,req,name=last_flushed_sequence_id,json=lastFlushedSequenceId" json:"last_flushed_sequence_id,omitempty"`
	StoreSequenceId       []*StoreSequenceId     `protobuf:"bytes,2,rep,name=store_sequence_id,json=storeSequenceId" json:"store_sequence_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RegionStoreSequenceIds) Reset() {
	*x = RegionStoreSequenceIds{}
	mi := &file_ClusterStatus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionStoreSequenceIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStoreSequenceIds) ProtoMessage() {}

func (x *RegionStoreSequenceIds) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStoreSequenceIds.ProtoReflect.Descriptor instead.
func (*RegionStoreSequenceIds) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{3}
}

func (x *RegionStoreSequenceIds) GetLastFlushedSequenceId() uint64 {
	if x != nil && x.LastFlushedSequenceId != nil {
		return *x.LastFlushedSequenceId
	}
	return 0
}

func (x *RegionStoreSequenceIds) GetStoreSequenceId() []*StoreSequenceId {
	if x != nil {
		return x.StoreSequenceId
	}
	return nil
}

type RegionLoad struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * the region specifier
	RegionSpecifier *RegionSpecifier `protobuf:"bytes,1,req,name=region_specifier,json=regionSpecifier" json:"region_specifier,omitempty"`
	// * the number of stores for the region
	Stores *uint32 `protobuf:"varint,2,opt,name=stores" json:"stores,omitempty"`
	// * the number of storefiles for the region
	Storefiles *uint32 `protobuf:"varint,3,opt,name=storefiles" json:"storefiles,omitempty"`
	// * the total size of the store files for the region, uncompressed, in MB
	StoreUncompressedSize_MB *uint32 `protobuf:"varint,4,opt,name=store_uncompressed_size_MB,json=storeUncompressedSizeMB" json:"store_uncompressed_size_MB,omitempty"`
	// * the current total size of the store files for the region, in MB
	StorefileSize_MB *uint32 `protobuf:"varint,5,opt,name=storefile_size_MB,json=storefileSizeMB" json:"storefile_size_MB,omitempty"`
	// * the current size of the memstore for the region, in MB
	MemstoreSize_MB *uint32 `protobuf:"varint,6,opt,name=memstore_size_MB,json=memstoreSizeMB" json:"memstore_size_MB,omitempty"`
	// *
	// The current total size of root-level store file indexes for the region,
	// in MB. The same as {@link #rootIndexSizeKB} but in MB.
	StorefileIndexSize_MB *uint32 `protobuf:"varint,7,opt,name=storefile_index_size_MB,json=storefileIndexSizeMB" json:"storefile_index_size_MB,omitempty"`
	// * the current total read requests made to region
	ReadRequestsCount *uint64 `protobuf:"varint,8,opt,name=read_requests_count,json=readRequestsCount" json:"read_requests_count,omitempty"`
	// * the current total write requests made to region
	WriteRequestsCount *uint64 `protobuf:"varint,9,opt,name=write_requests_count,json=writeRequestsCount" json:"write_requests_count,omitempty"`
	// * the total compacting key values in currently running compaction
	TotalCompacting_KVs *uint64 `protobuf:"varint,10,opt,name=total_compacting_KVs,json=totalCompactingKVs" json:"total_compacting_KVs,omitempty"`
	// * the completed count of key values in currently running compaction
	CurrentCompacted_KVs *uint64 `protobuf:"varint,11,opt,name=current_compacted_KVs,json=currentCompactedKVs" json:"current_compacted_KVs,omitempty"`
	// * The current total size of root-level indexes for the region, in KB.
	RootIndexSize_KB *uint32 `protobuf:"varint,12,opt,name=root_index_size_KB,json=rootIndexSizeKB" json:"root_index_size_KB,omitempty"`
	// * The total size of all index blocks, not just the root level, in KB.
	TotalStaticIndexSize_KB *uint32 `protobuf:"varint,13,opt,name=total_static_index_size_KB,json=totalStaticIndexSizeKB" json:"total_static_index_size_KB,omitempty"`
	// *
	// The total size of all Bloom filter blocks, not just loaded into the
	// block cache, in KB.
	TotalStaticBloomSize_KB *uint32 `protobuf:"varint,14,opt,name=total_static_bloom_size_KB,json=totalStaticBloomSizeKB" json:"total_static_bloom_size_KB,omitempty"`
	// * the most recent sequence Id from cache flush
	CompleteSequenceId *uint64 `protobuf:"varint,15,opt,name=complete_sequence_id,json=completeSequenceId" json:"complete_sequence_id,omitempty"`
	// * The current data locality for region in the regionserver
	DataLocality          *float32 `protobuf:"fixed32,16,opt,name=data_locality,json=dataLocality" json:"data_locality,omitempty"`
	LastMajorCompactionTs *uint64  `protobuf:"varint,17,opt,name=last_major_compaction_ts,json=lastMajorCompactionTs,def=0" json:"last_major_compaction_ts,omitempty"`
	// * the most recent sequence Id of store from cache flush
	StoreCompleteSequenceId []*StoreSequenceId `protobuf:"bytes,18,rep,name=store_complete_sequence_id,json=storeCompleteSequenceId" json:"store_complete_sequence_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for RegionLoad fields.
const (
	Default_RegionLoad_LastMajorCompactionTs = uint64(0)
)

func (x *RegionLoad) Reset() {
	*x = RegionLoad{}
	mi := &file_ClusterStatus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionLoad) ProtoMessage() {}

func (x *RegionLoad) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionLoad.ProtoReflect.Descriptor instead.
func (*RegionLoad) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{4}
}

func (x *RegionLoad) GetRegionSpecifier() *RegionSpecifier {
	if x != nil {
		return x.RegionSpecifier
	}
	return nil
}

func (x *RegionLoad) GetStores() uint32 {
	if x != nil && x.Stores != nil {
		return *x.Stores
	}
	return 0
}

func (x *RegionLoad) GetStorefiles() uint32 {
	if x != nil && x.Storefiles != nil {
		return *x.Storefiles
	}
	return 0
}

func (x *RegionLoad) GetStoreUncompressedSize_MB() uint32 {
	if x != nil && x.StoreUncompressedSize_MB != nil {
		return *x.StoreUncompressedSize_MB
	}
	return 0
}

func (x *RegionLoad) GetStorefileSize_MB() uint32 {
	if x != nil && x.StorefileSize_MB != nil {
		return *x.StorefileSize_MB
	}
	return 0
}

func (x *RegionLoad) GetMemstoreSize_MB() uint32 {
	if x != nil && x.MemstoreSize_MB != nil {
		return *x.MemstoreSize_MB
	}
	return 0
}

func (x *RegionLoad) GetStorefileIndexSize_MB() uint32 {
	if x != nil && x.StorefileIndexSize_MB != nil {
		return *x.StorefileIndexSize_MB
	}
	return 0
}

func (x *RegionLoad) GetReadRequestsCount() uint64 {
	if x != nil && x.ReadRequestsCount != nil {
		return *x.ReadRequestsCount
	}
	return 0
}

func (x *RegionLoad) GetWriteRequestsCount() uint64 {
	if x != nil && x.WriteRequestsCount != nil {
		return *x.WriteRequestsCount
	}
	return 0
}

func (x *RegionLoad) GetTotalCompacting_KVs() uint64 {
	if x != nil && x.TotalCompacting_KVs != nil {
		return *x.TotalCompacting_KVs
	}
	return 0
}

func (x *RegionLoad) GetCurrentCompacted_KVs() uint64 {
	if x != nil && x.CurrentCompacted_KVs != nil {
		return *x.CurrentCompacted_KVs
	}
	return 0
}

func (x *RegionLoad) GetRootIndexSize_KB() uint32 {
	if x != nil && x.RootIndexSize_KB != nil {
		return *x.RootIndexSize_KB
	}
	return 0
}

func (x *RegionLoad) GetTotalStaticIndexSize_KB() uint32 {
	if x != nil && x.TotalStaticIndexSize_KB != nil {
		return *x.TotalStaticIndexSize_KB
	}
	return 0
}

func (x *RegionLoad) GetTotalStaticBloomSize_KB() uint32 {
	if x != nil && x.TotalStaticBloomSize_KB != nil {
		return *x.TotalStaticBloomSize_KB
	}
	return 0
}

func (x *RegionLoad) GetCompleteSequenceId() uint64 {
	if x != nil && x.CompleteSequenceId != nil {
		return *x.CompleteSequenceId
	}
	return 0
}

func (x *RegionLoad) GetDataLocality() float32 {
	if x != nil && x.DataLocality != nil {
		return *x.DataLocality
	}
	return 0
}

func (x *RegionLoad) GetLastMajorCompactionTs() uint64 {
	if x != nil && x.LastMajorCompactionTs != nil {
		return *x.LastMajorCompactionTs
	}
	return Default_RegionLoad_LastMajorCompactionTs
}

func (x *RegionLoad) GetStoreCompleteSequenceId() []*StoreSequenceId {
	if x != nil {
		return x.StoreCompleteSequenceId
	}
	return nil
}

type ReplicationLoadSink struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	AgeOfLastAppliedOp        *uint64                `protobuf:"varint,1,req,name=ageOfLastAppliedOp" json:"ageOfLastAppliedOp,omitempty"`
	TimeStampsOfLastAppliedOp *uint64                `protobuf:"varint,2,req,name=timeStampsOfLastAppliedOp" json:"timeStampsOfLastAppliedOp,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ReplicationLoadSink) Reset() {
	*x = ReplicationLoadSink{}
	mi := &file_ClusterStatus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationLoadSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationLoadSink) ProtoMessage() {}

func (x *ReplicationLoadSink) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationLoadSink.ProtoReflect.Descriptor instead.
func (*ReplicationLoadSink) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{5}
}

func (x *ReplicationLoadSink) GetAgeOfLastAppliedOp() uint64 {
	if x != nil && x.AgeOfLastAppliedOp != nil {
		return *x.AgeOfLastAppliedOp
	}
	return 0
}

func (x *ReplicationLoadSink) GetTimeStampsOfLastAppliedOp() uint64 {
	if x != nil && x.TimeStampsOfLastAppliedOp != nil {
		return *x.TimeStampsOfLastAppliedOp
	}
	return 0
}

type ReplicationLoadSource struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PeerID                   *string                `protobuf:"bytes,1,req,name=peerID" json:"peerID,omitempty"`
	AgeOfLastShippedOp       *uint64                `protobuf:"varint,2,req,name=ageOfLastShippedOp" json:"ageOfLastShippedOp,omitempty"`
	SizeOfLogQueue           *uint32                `protobuf:"varint,3,req,name=sizeOfLogQueue" json:"sizeOfLogQueue,omitempty"`
	TimeStampOfLastShippedOp *uint64                `protobuf:"varint,4,req,name=timeStampOfLastShippedOp" json:"timeStampOfLastShippedOp,omitempty"`
	ReplicationLag           *uint64                `protobuf:"varint,5,req,name=replicationLag" json:"replicationLag,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ReplicationLoadSource) Reset() {
	*x = ReplicationLoadSource{}
	mi := &file_ClusterStatus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationLoadSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationLoadSource) ProtoMessage() {}

func (x *ReplicationLoadSource) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationLoadSource.ProtoReflect.Descriptor instead.
func (*ReplicationLoadSource) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicationLoadSource) GetPeerID() string {
	if x != nil && x.PeerID != nil {
		return *x.PeerID
	}
	return ""
}

func (x *ReplicationLoadSource) GetAgeOfLastShippedOp() uint64 {
	if x != nil && x.AgeOfLastShippedOp != nil {
		return *x.AgeOfLastShippedOp
	}
	return 0
}

func (x *ReplicationLoadSource) GetSizeOfLogQueue() uint32 {
	if x != nil && x.SizeOfLogQueue != nil {
		return *x.SizeOfLogQueue
	}
	return 0
}

func (x *ReplicationLoadSource) GetTimeStampOfLastShippedOp() uint64 {
	if x != nil && x.TimeStampOfLastShippedOp != nil {
		return *x.TimeStampOfLastShippedOp
	}
	return 0
}

func (x *ReplicationLoadSource) GetReplicationLag() uint64 {
	if x != nil && x.ReplicationLag != nil {
		return *x.ReplicationLag
	}
	return 0
}

type ServerLoad struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Number of requests since last report.
	NumberOfRequests *uint64 `protobuf:"varint,1,opt,name=number_of_requests,json=numberOfRequests" json:"number_of_requests,omitempty"`
	// * Total Number of requests from the start of the region server.
	TotalNumberOfRequests *uint64 `protobuf:"varint,2,opt,name=total_number_of_requests,json=totalNumberOfRequests" json:"total_number_of_requests,omitempty"`
	// * the amount of used heap, in MB.
	UsedHeap_MB *uint32 `protobuf:"varint,3,opt,name=used_heap_MB,json=usedHeapMB" json:"used_heap_MB,omitempty"`
	// * the maximum allowable size of the heap, in MB.
	MaxHeap_MB *uint32 `protobuf:"varint,4,opt,name=max_heap_MB,json=maxHeapMB" json:"max_heap_MB,omitempty"`
	// * Information on the load of individual regions.
	RegionLoads []*RegionLoad `protobuf:"bytes,5,rep,name=region_loads,json=regionLoads" json:"region_loads,omitempty"`
	// *
	// Regionserver-level coprocessors, e.g., WALObserver implementations.
	// Region-level coprocessors, on the other hand, are stored inside RegionLoad
	// objects.
	Coprocessors []*Coprocessor `protobuf:"bytes,6,rep,name=coprocessors" json:"coprocessors,omitempty"`
	// *
	// Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
	// time is measured as the difference, measured in milliseconds, between the current time
	// and midnight, January 1, 1970 UTC.
	ReportStartTime *uint64 `protobuf:"varint,7,opt,name=report_start_time,json=reportStartTime" json:"report_start_time,omitempty"`
	// *
	// Time when report was generated.
	// time is measured as the difference, measured in milliseconds, between the current time
	// and midnight, January 1, 1970 UTC.
	ReportEndTime *uint64 `protobuf:"varint,8,opt,name=report_end_time,json=reportEndTime" json:"report_end_time,omitempty"`
	// *
	// The port number that this region server is hosing an info server on.
	InfoServerPort *uint32 `protobuf:"varint,9,opt,name=info_server_port,json=infoServerPort" json:"info_server_port,omitempty"`
	// *
	// The replicationLoadSource for the replication Source status of this region server.
	ReplLoadSource []*ReplicationLoadSource `protobuf:"bytes,10,rep,name=replLoadSource" json:"replLoadSource,omitempty"`
	// *
	// The replicationLoadSink for the replication Sink status of this region server.
	ReplLoadSink  *ReplicationLoadSink `protobuf:"bytes,11,opt,name=replLoadSink" json:"replLoadSink,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerLoad) Reset() {
	*x = ServerLoad{}
	mi := &file_ClusterStatus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLoad) ProtoMessage() {}

func (x *ServerLoad) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLoad.ProtoReflect.Descriptor instead.
func (*ServerLoad) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{7}
}

func (x *ServerLoad) GetNumberOfRequests() uint64 {
	if x != nil && x.NumberOfRequests != nil {
		return *x.NumberOfRequests
	}
	return 0
}

func (x *ServerLoad) GetTotalNumberOfRequests() uint64 {
	if x != nil && x.TotalNumberOfRequests != nil {
		return *x.TotalNumberOfRequests
	}
	return 0
}

func (x *ServerLoad) GetUsedHeap_MB() uint32 {
	if x != nil && x.UsedHeap_MB != nil {
		return *x.UsedHeap_MB
	}
	return 0
}

func (x *ServerLoad) GetMaxHeap_MB() uint32 {
	if x != nil && x.MaxHeap_MB != nil {
		return *x.MaxHeap_MB
	}
	return 0
}

func (x *ServerLoad) GetRegionLoads() []*RegionLoad {
	if x != nil {
		return x.RegionLoads
	}
	return nil
}

func (x *ServerLoad) GetCoprocessors() []*Coprocessor {
	if x != nil {
		return x.Coprocessors
	}
	return nil
}

func (x *ServerLoad) GetReportStartTime() uint64 {
	if x != nil && x.ReportStartTime != nil {
		return *x.ReportStartTime
	}
	return 0
}

func (x *ServerLoad) GetReportEndTime() uint64 {
	if x != nil && x.ReportEndTime != nil {
		return *x.ReportEndTime
	}
	return 0
}

func (x *ServerLoad) GetInfoServerPort() uint32 {
	if x != nil && x.InfoServerPort != nil {
		return *x.InfoServerPort
	}
	return 0
}

func (x *ServerLoad) GetReplLoadSource() []*ReplicationLoadSource {
	if x != nil {
		return x.ReplLoadSource
	}
	return nil
}

func (x *ServerLoad) GetReplLoadSink() *ReplicationLoadSink {
	if x != nil {
		return x.ReplLoadSink
	}
	return nil
}

type LiveServerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *ServerName            `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	ServerLoad    *ServerLoad            `protobuf:"bytes,2,req,name=server_load,json=serverLoad" json:"server_load,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveServerInfo) Reset() {
	*x = LiveServerInfo{}
	mi := &file_ClusterStatus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveServerInfo) ProtoMessage() {}

func (x *LiveServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveServerInfo.ProtoReflect.Descriptor instead.
func (*LiveServerInfo) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{8}
}

func (x *LiveServerInfo) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *LiveServerInfo) GetServerLoad() *ServerLoad {
	if x != nil {
		return x.ServerLoad
	}
	return nil
}

type ClusterStatus struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	HbaseVersion        *HBaseVersionFileContent `protobuf:"bytes,1,opt,name=hbase_version,json=hbaseVersion" json:"hbase_version,omitempty"`
	LiveServers         []*LiveServerInfo        `protobuf:"bytes,2,rep,name=live_servers,json=liveServers" json:"live_servers,omitempty"`
	DeadServers         []*ServerName            `protobuf:"bytes,3,rep,name=dead_servers,json=deadServers" json:"dead_servers,omitempty"`
	RegionsInTransition []*RegionInTransition    `protobuf:"bytes,4,rep,name=regions_in_transition,json=regionsInTransition" json:"regions_in_transition,omitempty"`
	ClusterId           *ClusterId               `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	MasterCoprocessors  []*Coprocessor           `protobuf:"bytes,6,rep,name=master_coprocessors,json=masterCoprocessors" json:"master_coprocessors,omitempty"`
	Master              *ServerName              `protobuf:"bytes,7,opt,name=master" json:"master,omitempty"`
	BackupMasters       []*ServerName            `protobuf:"bytes,8,rep,name=backup_masters,json=backupMasters" json:"backup_masters,omitempty"`
	BalancerOn          *bool                    `protobuf:"varint,9,opt,name=balancer_on,json=balancerOn" json:"balancer_on,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	mi := &file_ClusterStatus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ClusterStatus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_ClusterStatus_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterStatus) GetHbaseVersion() *HBaseVersionFileContent {
	if x != nil {
		return x.HbaseVersion
	}
	return nil
}

func (x *ClusterStatus) GetLiveServers() []*LiveServerInfo {
	if x != nil {
		return x.LiveServers
	}
	return nil
}

func (x *ClusterStatus) GetDeadServers() []*ServerName {
	if x != nil {
		return x.DeadServers
	}
	return nil
}

func (x *ClusterStatus) GetRegionsInTransition() []*RegionInTransition {
	if x != nil {
		return x.RegionsInTransition
	}
	return nil
}

func (x *ClusterStatus) GetClusterId() *ClusterId {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *ClusterStatus) GetMasterCoprocessors() []*Coprocessor {
	if x != nil {
		return x.MasterCoprocessors
	}
	return nil
}

func (x *ClusterStatus) GetMaster() *ServerName {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *ClusterStatus) GetBackupMasters() []*ServerName {
	if x != nil {
		return x.BackupMasters
	}
	return nil
}

func (x *ClusterStatus) GetBalancerOn() bool {
	if x != nil && x.BalancerOn != nil {
		return *x.BalancerOn
	}
	return false
}

var File_ClusterStatus_proto protoreflect.FileDescriptor

const file_ClusterStatus_proto_rawDesc = "" +
	"\n" +
	"\x13ClusterStatus.proto\x12\x02pb\x1a\vHBase.proto\x1a\x0fClusterId.proto\x1a\bFS.proto\"\xe7\x02\n" +
	"\vRegionState\x12/\n" +
	"\vregion_info\x18\x01 \x02(\v2\x0e.pb.RegionInfoR\n" +
	"regionInfo\x12+\n" +
	"\x05state\x18\x02 \x02(\x0e2\x15.pb.RegionState.StateR\x05state\x12\x14\n" +
	"\x05stamp\x18\x03 \x01(\x04R\x05stamp\"\xe3\x01\n" +
	"\x05State\x12\v\n" +
	"\aOFFLINE\x10\x00\x12\x10\n" +
	"\fPENDING_OPEN\x10\x01\x12\v\n" +
	"\aOPENING\x10\x02\x12\b\n" +
	"\x04OPEN\x10\x03\x12\x11\n" +
	"\rPENDING_CLOSE\x10\x04\x12\v\n" +
	"\aCLOSING\x10\x05\x12\n" +
	"\n" +
	"\x06CLOSED\x10\x06\x12\r\n" +
	"\tSPLITTING\x10\a\x12\t\n" +
	"\x05SPLIT\x10\b\x12\x0f\n" +
	"\vFAILED_OPEN\x10\t\x12\x10\n" +
	"\fFAILED_CLOSE\x10\n" +
	"\x12\v\n" +
	"\aMERGING\x10\v\x12\n" +
	"\n" +
	"\x06MERGED\x10\f\x12\x11\n" +
	"\rSPLITTING_NEW\x10\r\x12\x0f\n" +
	"\vMERGING_NEW\x10\x0e\"q\n" +
	"\x12RegionInTransition\x12'\n" +
	"\x04spec\x18\x01 \x02(\v2\x13.pb.RegionSpecifierR\x04spec\x122\n" +
	"\fregion_state\x18\x02 \x02(\v2\x0f.pb.RegionStateR\vregionState\"S\n" +
	"\x0fStoreSequenceId\x12\x1f\n" +
	"\vfamily_name\x18\x01 \x02(\fR\n" +
	"familyName\x12\x1f\n" +
	"\vsequence_id\x18\x02 \x02(\x04R\n" +
	"sequenceId\"\x92\x01\n" +
	"\x16RegionStoreSequenceIds\x127\n" +
	"\x18last_flushed_sequence_id\x18\x01 \x02(\x04R\x15lastFlushedSequenceId\x12?\n" +
	"\x11store_sequence_id\x18\x02 \x03(\v2\x13.pb.StoreSequenceIdR\x0fstoreSequenceId\"\xa0\a\n" +
	"\n" +
	"RegionLoad\x12>\n" +
	"\x10region_specifier\x18\x01 \x02(\v2\x13.pb.RegionSpecifierR\x0fregionSpecifier\x12\x16\n" +
	"\x06stores\x18\x02 \x01(\rR\x06stores\x12\x1e\n" +
	"\n" +
	"storefiles\x18\x03 \x01(\rR\n" +
	"storefiles\x12;\n" +
	"\x1astore_uncompressed_size_MB\x18\x04 \x01(\rR\x17storeUncompressedSizeMB\x12*\n" +
	"\x11storefile_size_MB\x18\x05 \x01(\rR\x0fstorefileSizeMB\x12(\n" +
	"\x10memstore_size_MB\x18\x06 \x01(\rR\x0ememstoreSizeMB\x125\n" +
	"\x17storefile_index_size_MB\x18\a \x01(\rR\x14storefileIndexSizeMB\x12.\n" +
	"\x13read_requests_count\x18\b \x01(\x04R\x11readRequestsCount\x120\n" +
	"\x14write_requests_count\x18\t \x01(\x04R\x12writeRequestsCount\x120\n" +
	"\x14total_compacting_KVs\x18\n" +
	" \x01(\x04R\x12totalCompactingKVs\x122\n" +
	"\x15current_compacted_KVs\x18\v \x01(\x04R\x13currentCompactedKVs\x12+\n" +
	"\x12root_index_size_KB\x18\f \x01(\rR\x0frootIndexSizeKB\x12:\n" +
	"\x1atotal_static_index_size_KB\x18\r \x01(\rR\x16totalStaticIndexSizeKB\x12:\n" +
	"\x1atotal_static_bloom_size_KB\x18\x0e \x01(\rR\x16totalStaticBloomSizeKB\x120\n" +
	"\x14complete_sequence_id\x18\x0f \x01(\x04R\x12completeSequenceId\x12#\n" +
	"\rdata_locality\x18\x10 \x01(\x02R\fdataLocality\x12:\n" +
	"\x18last_major_compaction_ts\x18\x11 \x01(\x04:\x010R\x15lastMajorCompactionTs\x12P\n" +
	"\x1astore_complete_sequence_id\x18\x12 \x03(\v2\x13.pb.StoreSequenceIdR\x17storeCompleteSequenceId\"\x83\x01\n" +
	"\x13ReplicationLoadSink\x12.\n" +
	"\x12ageOfLastAppliedOp\x18\x01 \x02(\x04R\x12ageOfLastAppliedOp\x12<\n" +
	"\x19timeStampsOfLastAppliedOp\x18\x02 \x02(\x04R\x19timeStampsOfLastAppliedOp\"\xeb\x01\n" +
	"\x15ReplicationLoadSource\x12\x16\n" +
	"\x06peerID\x18\x01 \x02(\tR\x06peerID\x12.\n" +
	"\x12ageOfLastShippedOp\x18\x02 \x02(\x04R\x12ageOfLastShippedOp\x12&\n" +
	"\x0esizeOfLogQueue\x18\x03 \x02(\rR\x0esizeOfLogQueue\x12:\n" +
	"\x18timeStampOfLastShippedOp\x18\x04 \x02(\x04R\x18timeStampOfLastShippedOp\x12&\n" +
	"\x0ereplicationLag\x18\x05 \x02(\x04R\x0ereplicationLag\"\x9b\x04\n" +
	"\n" +
	"ServerLoad\x12,\n" +
	"\x12number_of_requests\x18\x01 \x01(\x04R\x10numberOfRequests\x127\n" +
	"\x18total_number_of_requests\x18\x02 \x01(\x04R\x15totalNumberOfRequests\x12 \n" +
	"\fused_heap_MB\x18\x03 \x01(\rR\n" +
	"usedHeapMB\x12\x1e\n" +
	"\vmax_heap_MB\x18\x04 \x01(\rR\tmaxHeapMB\x121\n" +
	"\fregion_loads\x18\x05 \x03(\v2\x0e.pb.RegionLoadR\vregionLoads\x123\n" +
	"\fcoprocessors\x18\x06 \x03(\v2\x0f.pb.CoprocessorR\fcoprocessors\x12*\n" +
	"\x11report_start_time\x18\a \x01(\x04R\x0freportStartTime\x12&\n" +
	"\x0freport_end_time\x18\b \x01(\x04R\rreportEndTime\x12(\n" +
	"\x10info_server_port\x18\t \x01(\rR\x0einfoServerPort\x12A\n" +
	"\x0ereplLoadSource\x18\n" +
	" \x03(\v2\x19.pb.ReplicationLoadSourceR\x0ereplLoadSource\x12;\n" +
	"\freplLoadSink\x18\v \x01(\v2\x17.pb.ReplicationLoadSinkR\freplLoadSink\"i\n" +
	"\x0eLiveServerInfo\x12&\n" +
	"\x06server\x18\x01 \x02(\v2\x0e.pb.ServerNameR\x06server\x12/\n" +
	"\vserver_load\x18\x02 \x02(\v2\x0e.pb.ServerLoadR\n" +
	"serverLoad\"\xf7\x03\n" +
	"\rClusterStatus\x12@\n" +
	"\rhbase_version\x18\x01 \x01(\v2\x1b.pb.HBaseVersionFileContentR\fhbaseVersion\x125\n" +
	"\flive_servers\x18\x02 \x03(\v2\x12.pb.LiveServerInfoR\vliveServers\x121\n" +
	"\fdead_servers\x18\x03 \x03(\v2\x0e.pb.ServerNameR\vdeadServers\x12J\n" +
	"\x15regions_in_transition\x18\x04 \x03(\v2\x16.pb.RegionInTransitionR\x13regionsInTransition\x12,\n" +
	"\n" +
	"cluster_id\x18\x05 \x01(\v2\r.pb.ClusterIdR\tclusterId\x12@\n" +
	"\x13master_coprocessors\x18\x06 \x03(\v2\x0f.pb.CoprocessorR\x12masterCoprocessors\x12&\n" +
	"\x06master\x18\a \x01(\v2\x0e.pb.ServerNameR\x06master\x125\n" +
	"\x0ebackup_masters\x18\b \x03(\v2\x0e.pb.ServerNameR\rbackupMasters\x12\x1f\n" +
	"\vbalancer_on\x18\t \x01(\bR\n" +
	"balancerOnBM\n" +
	"*org.apache.hadoop.hbase.protobuf.generatedB\x13ClusterStatusProtosH\x01Z\x05../pb\xa0\x01\x01"

var (
	file_ClusterStatus_proto_rawDescOnce sync.Once
	file_ClusterStatus_proto_rawDescData []byte
)

func file_ClusterStatus_proto_rawDescGZIP() []byte {
	file_ClusterStatus_proto_rawDescOnce.Do(func() {
		file_ClusterStatus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ClusterStatus_proto_rawDesc), len(file_ClusterStatus_proto_rawDesc)))
	})
	return file_ClusterStatus_proto_rawDescData
}

var file_ClusterStatus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ClusterStatus_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ClusterStatus_proto_goTypes = []any{
	(RegionState_State)(0),          // 0: pb.RegionState.State
	(*RegionState)(nil),             // 1: pb.RegionState
	(*RegionInTransition)(nil),      // 2: pb.RegionInTransition
	(*StoreSequenceId)(nil),         // 3: pb.StoreSequenceId
	(*RegionStoreSequenceIds)(nil),  // 4: pb.RegionStoreSequenceIds
	(*RegionLoad)(nil),              // 5: pb.RegionLoad
	(*ReplicationLoadSink)(nil),     // 6: pb.ReplicationLoadSink
	(*ReplicationLoadSource)(nil),   // 7: pb.ReplicationLoadSource
	(*ServerLoad)(nil),              // 8: pb.ServerLoad
	(*LiveServerInfo)(nil),          // 9: pb.LiveServerInfo
	(*ClusterStatus)(nil),           // 10: pb.ClusterStatus
	(*RegionInfo)(nil),              // 11: pb.RegionInfo
	(*RegionSpecifier)(nil),         // 12: pb.RegionSpecifier
	(*Coprocessor)(nil),             // 13: pb.Coprocessor
	(*ServerName)(nil),              // 14: pb.ServerName
	(*HBaseVersionFileContent)(nil), // 15: pb.HBaseVersionFileContent
	(*ClusterId)(nil),               // 16: pb.ClusterId
}
var file_ClusterStatus_proto_depIdxs = []int32{
	11, // 0: pb.RegionState.region_info:type_name -> pb.RegionInfo
	0,  // 1: pb.RegionState.state:type_name -> pb.RegionState.State
	12, // 2: pb.RegionInTransition.spec:type_name -> pb.RegionSpecifier
	1,  // 3: pb.RegionInTransition.region_state:type_name -> pb.RegionState
	3,  // 4: pb.RegionStoreSequenceIds.store_sequence_id:type_name -> pb.StoreSequenceId
	12, // 5: pb.RegionLoad.region_specifier:type_name -> pb.RegionSpecifier
	3,  // 6: pb.RegionLoad.store_complete_sequence_id:type_name -> pb.StoreSequenceId
	5,  // 7: pb.ServerLoad.region_loads:type_name -> pb.RegionLoad
	13, // 8: pb.ServerLoad.coprocessors:type_name -> pb.Coprocessor
	7,  // 9: pb.ServerLoad.replLoadSource:type_name -> pb.ReplicationLoadSource
	6,  // 10: pb.ServerLoad.replLoadSink:type_name -> pb.ReplicationLoadSink
	14, // 11: pb.LiveServerInfo.server:type_name -> pb.ServerName
	8,  // 12: pb.LiveServerInfo.server_load:type_name -> pb.ServerLoad
	15, // 13: pb.ClusterStatus.hbase_version:type_name -> pb.HBaseVersionFileContent
	9,  // 14: pb.ClusterStatus.live_servers:type_name -> pb.LiveServerInfo
	14, // 15: pb.ClusterStatus.dead_servers:type_name -> pb.ServerName
	2,  // 16: pb.ClusterStatus.regions_in_transition:type_name -> pb.RegionInTransition
	16, // 17: pb.ClusterStatus.cluster_id:type_name -> pb.ClusterId
	13, // 18: pb.ClusterStatus.master_coprocessors:type_name -> pb.Coprocessor
	14, // 19: pb.ClusterStatus.master:type_name -> pb.ServerName
	14, // 20: pb.ClusterStatus.backup_masters:type_name -> pb.ServerName
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ClusterStatus_proto_init() }
func file_ClusterStatus_proto_init() {
	if File_ClusterStatus_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_ClusterId_proto_init()
	file_FS_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ClusterStatus_proto_rawDesc), len(file_ClusterStatus_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ClusterStatus_proto_goTypes,
		DependencyIndexes: file_ClusterStatus_proto_depIdxs,
		EnumInfos:         file_ClusterStatus_proto_enumTypes,
		MessageInfos:      file_ClusterStatus_proto_msgTypes,
	}.Build()
	File_ClusterStatus_proto = out.File
	file_ClusterStatus_proto_goTypes = nil
	file_ClusterStatus_proto_depIdxs = nil
}
